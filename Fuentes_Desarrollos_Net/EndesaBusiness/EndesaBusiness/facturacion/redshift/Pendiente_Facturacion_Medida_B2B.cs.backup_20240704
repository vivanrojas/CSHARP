using EndesaBusiness.utilidades;
using MySql.Data.MySqlClient;
using OfficeOpenXml.Style;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EndesaBusiness.servidores;
using System.Drawing;
using System.Data.Odbc;


namespace EndesaBusiness.facturacion.redshift
{
    public class Pendiente_Facturacion_Medida_B2B
    {
        utilidades.Param param;
        utilidades.Seguimiento_Procesos ss_pp;
        logs.Log ficheroLog;

        Dictionary<DateTime, List<EndesaEntity.medida.Pendiente>> dic_pendiente_hist_fecha;
        Dictionary<string, DateTime> dic_dias_estado;

        EndesaBusiness.facturacion.redshift.Pendiente_Subestados subestados_sap;
        EndesaBusiness.medida.pendiente.PendienteWeb_B2B pendienteWeb_B2B;
        EndesaBusiness.medida.EstadosSubestadosKronos subestadosKronos;
        EndesaBusiness.medida.pendiente.PendienteFacturadoSAPKEE pendienteSAPKEE;

        //EndesaBusiness.facturacion.cuadro_mando.Sofisticados sofisticados;


        public Pendiente_Facturacion_Medida_B2B()
        {
            param = new utilidades.Param("t_ed_h_pendiente_sap_kronos_param", servidores.MySQLDB.Esquemas.FAC);
            ss_pp = new utilidades.Seguimiento_Procesos();
            ficheroLog = new logs.Log(Environment.CurrentDirectory, "logs", "FAC_MED_Pendiente_Facturacion_Medida_B2B");
            subestados_sap = new Pendiente_Subestados();
            subestadosKronos = new medida.EstadosSubestadosKronos();
            pendienteWeb_B2B = new medida.pendiente.PendienteWeb_B2B();

            //sofisticados = new cuadro_mando.Sofisticados();
            //sofisticados.Contruye_Sofisticados();

        }

        private DateTime UltimaActualizacionMySQL()
        {
            MySQLDB db;
            MySqlCommand command;
            MySqlDataReader r;
            string strSql = "";
            DateTime fecha = new DateTime(2022, 01, 01);

            strSql = "SELECT max(fh_envio) AS fh_envio FROM t_ed_h_sap_pendiente_facturar";
            db = new MySQLDB(MySQLDB.Esquemas.FAC);
            command = new MySqlCommand(strSql, db.con);
            r = command.ExecuteReader();
            while (r.Read())
                if (r["fh_envio"] != System.DBNull.Value)
                    fecha = Convert.ToDateTime(r["fh_envio"]);
            db.CloseConnection();
            Console.WriteLine("Última fecha de copiado MySQL: " + fecha.ToString("dd/MM/yyyy"));
            ficheroLog.Add("Última fecha de copiado MySQL: " + fecha.ToString("dd/MM/yyyy"));

            return fecha;
        }

        public void GeneraInformePendSAP(bool automatico)
        {
            FileInfo file;
            string ruta_salida_archivo = "";

            string[] listaArchivos = System.IO.Directory.GetFiles(automatico ? param.GetValue("ruta_salida_informe") : @"c:\Temp\",
                    param.GetValue("prefijo_informe") + "*.xlsx");

            for (int i = 0; i < listaArchivos.Length; i++)
            {
                file = new FileInfo(listaArchivos[i]);
                file.Delete();
            }

            if (automatico)
                ruta_salida_archivo = param.GetValue("ruta_salida_informe")
                    + param.GetValue("prefijo_informe")
                    + DateTime.Now.ToString("yyyyMMdd")
                    + param.GetValue("sufijo_informe");
            else
                ruta_salida_archivo = @"c:\Temp\"
                   + param.GetValue("prefijo_informe")
                   + DateTime.Now.ToString("yyyyMMdd")
                   + param.GetValue("sufijo_informe");

            InformePendiente_BI_Facturacion(ruta_salida_archivo, automatico);
        }

        private Dictionary<DateTime, List<EndesaEntity.medida.Pendiente>> CargaPendienteHist_DesdeFecha(DateTime f, List<string> lista_empresas)
        {
            MySQLDB db;
            MySqlCommand command;
            MySqlDataReader r;
            string strSql = "";

            Dictionary<DateTime, List<EndesaEntity.medida.Pendiente>> d
                = new Dictionary<DateTime, List<EndesaEntity.medida.Pendiente>>();

            DateTime fecha_actual = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            DateTime fecha_registro = new DateTime();
            int meses_pdtes = 0;
            int aniomes = 0;
            int num_dias_informe = 0;
            bool firstOnly = true;

            try
            {

                //sof.Contruye_Sofisticados();
                //agoraManual = CargaAgoraManual(DateTime.Now, DateTime.Now);
                //agoraPortugal = new contratacion.Agora_Portugal();

                /*strSql = " SELECT fecha_informe, pend.empresa_titular AS EMPRESA,"
                    + " pend.cups13, "
                    + " pend.mes as aaaammPdte, pend.estado, pend.subestado, pend.tam"
                    + " FROM fact. pend where "
                    + " fecha_informe >= '" + f.ToString("yyyy-MM-dd") + "'"
                    + " ORDER BY pend.fecha_informe, pend.empresa_titular, "
                    + " pend.cups13, pend.mes ASC";
                */

                strSql = "SELECT p.cd_empr_titular, ps.cd_empr, ps.cd_nif_cif_cli, ps.de_tp_cli, ps.tx_apell_cli,"
                        //+ " ps.fh_alta_crto, ps.fh_inicio_vers_crto, ps.cups20, ps.cd_tarifa_c,"
                        + " ps.fh_alta_crto, ps.fh_inicio_vers_crto, p.cd_cups as cups20, ps.cd_tarifa_c,"
                        + " ps.cd_crto_comercial, ps.de_empr_distdora_nombre, p.cd_estado, p.cd_subestado,"
                        + " de.de_estado, ds.de_subestado, p.fh_periodo, p.agora, p.TAM,"
                        + " p.lg_multimedida, p.fec_act, p.fh_desde, p.fh_hasta, ps.fh_prev_fin_crto, ps.fh_baja_crto"
                        + " FROM fact.t_ed_h_sap_pendiente_facturar_agrupado p"
                        + " LEFT OUTER JOIN cont.t_ed_h_ps ps ON"
                        + " ps.cups20 = p.cd_cups"
                        + " LEFT OUTER JOIN fact.t_ed_p_estado_sap_pendiente_facturar de on"
                        + " de.cd_estado = p.cd_estado"
                        + " LEFT OUTER JOIN fact.t_ed_p_subestado_sap_pendiente_facturar ds on"
                        + " ds.cd_subestado = p.cd_subestado"
                        + " where p.fec_act >= '" + DateTime.Now.AddDays(-10).ToString("yyyy-MM-dd") + "'";
                      //  + " and ps.cups20 in ('ES0021000001531208ZA')";


                foreach (string p in lista_empresas)
                {
                    if (firstOnly)
                    {
                        strSql += " and cd_empr_titular in ("
                            + "'" + p + "'";
                        firstOnly = false;
                    }
                    else
                        strSql += ",'" + p + "'";
                }



                strSql += ") ORDER BY p.fec_act desc, ps.cd_empr, "
                    //+ " ps.cups20, p.fh_periodo ASC";
                    +" p.cd_cups, p.fh_periodo ASC";


                Console.WriteLine(strSql);
                ficheroLog.Add(strSql);
                db = new MySQLDB(MySQLDB.Esquemas.GBL);
                command = new MySqlCommand(strSql, db.con);
                r = command.ExecuteReader();
                while (r.Read())
                {
                    EndesaEntity.medida.Pendiente c = new EndesaEntity.medida.Pendiente();
                    c.cod_empresaTitular = r["cd_empr_titular"].ToString();
                    c.empresaTitular = r["cd_empr"].ToString();
                    c.cups20 = r["cups20"].ToString();
      
                    c.aaaammPdte = Convert.ToInt32(r["fh_periodo"]);
                    c.cod_estado = r["cd_estado"].ToString();
                    c.cod_subestado = r["cd_subestado"].ToString();
                    c.estado = r["de_estado"].ToString();
                    c.subsEstado = r["de_subestado"].ToString();
                    c.fecha_informe = Convert.ToDateTime(r["fec_act"]).Date;
                    if (r["fh_prev_fin_crto"] != System.DBNull.Value)
                    {
                        c.fh_prev_fin_crto = Convert.ToDateTime(r["fh_prev_fin_crto"]).Date;
                    }
                    if (r["fh_baja_crto"] != System.DBNull.Value)
                    {
                        c.fh_baja_crto = Convert.ToDateTime(r["fh_baja_crto"]).Date;
                    }

                    c.fh_desde = Convert.ToDateTime(r["fh_desde"]).Date;
                    c.fh_hasta = Convert.ToDateTime(r["fh_hasta"]).Date;

                    c.fh_act = Convert.ToDateTime(r["fec_act"]).Date;

                    if (r["tam"] != System.DBNull.Value)
                    {
                        if (c.aaaammPdte != 0)
                        {
                            aniomes = Convert.ToInt32(c.aaaammPdte);
                            fecha_registro = new DateTime(Convert.ToInt32(aniomes.ToString().Substring(0, 4)),
                                Convert.ToInt32(aniomes.ToString().Substring(4, 2)), 1);

                            meses_pdtes = ((fecha_actual.Year - fecha_registro.Year) * 12)
                                + fecha_actual.Month - fecha_registro.Month;
                            c.tam = Convert.ToDouble(r["tam"]) * meses_pdtes;
                        }
                        else
                            c.tam = Convert.ToDouble(r["tam"]);

                    }

                    if (r["agora"] != System.DBNull.Value)
                        if (r["agora"].ToString() != "N")
                            c.agora = true;
                        else
                            c.agora = false;
                    else
                        c.agora = false;

                    if (r["lg_multimedida"] != System.DBNull.Value)
                        c.multimedida = r["lg_multimedida"].ToString() == "S";
                    else
                        c.multimedida = false;


                    //if (r["cups20"].ToString() == "ES0021000001531208ZA") {

                    //    System.Windows.Forms.MessageBox.Show("");
                    //};
     
                    //AÑADIMOS las etiquetas de SAP
                    if (subestados_sap.AreaResponsableMedida(r["cd_subestado"].ToString()))
                    {
                        subestadosKronos.existe = false;
                        subestadosKronos.GetEstadoKEE(pendienteWeb_B2B.GetCups(r["cups20"].ToString(),
                            Convert.ToDateTime(r["fh_desde"]), Convert.ToDateTime(r["fh_hasta"])));



                        if (subestadosKronos.existe)
                        {
                            //workSheet.Cells[f, c].Value = subestadosKronos.estado_periodo; c++;
                            //workSheet.Cells[f, c].Value = subestadosKronos.area_responsable; c++;
                            c.subestado_SAP =  subestadosKronos.descripcion_subestado;
                            //workSheet.Cells[f, c].Value = subestadosKronos.descripcion_estado; c++;
                            c.cod_subestado_SAP = subestadosKronos.descripcion_subestado.Substring(0, subestadosKronos.descripcion_subestado.IndexOf(" "));
                            
                        }
                    }
                    //


                    // Sólo necesitamos los últimos 5 días para el informe                    
                    List<EndesaEntity.medida.Pendiente> o;
                    if (!d.TryGetValue(c.fecha_informe, out o))
                    {
                        
                        o = new List<EndesaEntity.medida.Pendiente>();
                        o.Add(c);
                        d.Add(c.fecha_informe, o);
                    }
                    else
                        o.Add(c);
                    System.Diagnostics.Debug.WriteLine(c.cups20 + "-" + c.fh_act + "-" + c.cod_subestado + "-" + c.cod_subestado + "-" + c.cod_subestado_SAP + "-" + c.cod_subestado_SAP);
                }
                db.CloseConnection();

                return d;
            }
            catch (Exception e)
            {
                ficheroLog.addError("CargaPendiente: " + e.Message);
                return null;
            }
        }
        private Dictionary<DateTime, List<EndesaEntity.medida.Pendiente>> CargaPendienteHist_PT_DesdeFecha(DateTime f, List<string> lista_empresas, List<string> lista_segmentos)
        {
            MySQLDB db;
            MySqlCommand command;
            MySqlDataReader r;
            string strSql = "";

            Dictionary<DateTime, List<EndesaEntity.medida.Pendiente>> d
                = new Dictionary<DateTime, List<EndesaEntity.medida.Pendiente>>();

            DateTime fecha_actual = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            DateTime fecha_registro = new DateTime();
            int meses_pdtes = 0;
            int aniomes = 0;
            int num_dias_informe = 0;
            bool firstOnly = true;

            try
            {
                //sof.Contruye_Sofisticados();
                //agoraManual = CargaAgoraManual(DateTime.Now, DateTime.Now);
                //agoraPortugal = new contratacion.Agora_Portugal();


                strSql = "SELECT p.cd_empr_titular, ps.cd_empr, ps.cd_nif_cif_cli, ps.de_tp_cli, ps.tx_apell_cli,"
                        + " ps.fh_alta_crto, ps.fh_inicio_vers_crto, ps.cups20, ps.cd_tarifa_c, ps.cd_tp_tension,"
                        + " ps.cd_crto_comercial, ps.de_empr_distdora_nombre, p.cd_estado, p.cd_subestado,"
                        + " de.de_estado, ds.de_subestado, p.fh_periodo, p.agora, p.TAM,"
                        + " p.lg_multimedida, p.fec_act, p.fh_desde, p.fh_hasta"
                        + " FROM fact.t_ed_h_sap_pendiente_facturar_agrupado p"
                        + " LEFT OUTER JOIN cont.t_ed_h_ps_pt ps ON"
                        + " ps.cups20 = p.cd_cups"
                        + " LEFT OUTER JOIN fact.t_ed_p_estado_sap_pendiente_facturar de on"
                        + " de.cd_estado = p.cd_estado"
                        + " LEFT OUTER JOIN fact.t_ed_p_subestado_sap_pendiente_facturar ds on"
                        + " ds.cd_subestado = p.cd_subestado"
                        + " where p.fec_act >= '" + DateTime.Now.AddDays(-10).ToString("yyyy-MM-dd") + "'";
                       // + " and ps.cups20 in ('ES0021000001531208ZA')";

                foreach (string p in lista_empresas)
                {
                    if (firstOnly)
                    {
                        strSql += " and cd_empr_titular in ("
                            + "'" + p + "'";
                        firstOnly = false;
                    }
                    else
                        strSql += ",'" + p + "'";
                }

                firstOnly = true;
                foreach (string p in lista_segmentos)
                {
                    if (firstOnly)
                    {
                        strSql += ") and cd_tp_tension in ("
                            + "'" + p + "'";
                        firstOnly = false;
                    }
                    else
                        strSql += ",'" + p + "'";
                }



                strSql += ") ORDER BY p.fec_act desc, ps.cd_empr, "
                     + " ps.cups20, p.fh_periodo ASC";


                Console.WriteLine(strSql);
                ficheroLog.Add(strSql);
                db = new MySQLDB(MySQLDB.Esquemas.GBL);
                command = new MySqlCommand(strSql, db.con);
                r = command.ExecuteReader();
                while (r.Read())
                {
                    EndesaEntity.medida.Pendiente c = new EndesaEntity.medida.Pendiente();
                    c.cod_empresaTitular = r["cd_empr_titular"].ToString();
                    c.empresaTitular = r["cd_empr"].ToString();
                    c.cups20 = r["cups20"].ToString();
                    c.aaaammPdte = Convert.ToInt32(r["fh_periodo"]);
                    c.cod_estado = r["cd_estado"].ToString();
                    c.cod_subestado = r["cd_subestado"].ToString();
                    c.estado = r["de_estado"].ToString();
                    c.subsEstado = r["de_subestado"].ToString();
                    c.fecha_informe = Convert.ToDateTime(r["fec_act"]).Date;

                    c.fh_desde = Convert.ToDateTime(r["fh_desde"]).Date;
                    c.fh_hasta = Convert.ToDateTime(r["fh_hasta"]).Date;

                    if (r["cd_tp_tension"] != System.DBNull.Value)
                        c.segmento = r["cd_tp_tension"].ToString();


                    if (r["tam"] != System.DBNull.Value)
                    {
                        if (c.aaaammPdte != 0)
                        {
                            aniomes = Convert.ToInt32(c.aaaammPdte);
                            fecha_registro = new DateTime(Convert.ToInt32(aniomes.ToString().Substring(0, 4)),
                                Convert.ToInt32(aniomes.ToString().Substring(4, 2)), 1);

                            meses_pdtes = ((fecha_actual.Year - fecha_registro.Year) * 12)
                                + fecha_actual.Month - fecha_registro.Month;
                            c.tam = Convert.ToDouble(r["tam"]) * meses_pdtes;
                        }
                        else
                            c.tam = Convert.ToDouble(r["tam"]);

                    }

                    if (r["agora"] != System.DBNull.Value)
                        if (r["agora"].ToString() != "N")
                            c.agora = true;
                        else
                            c.agora = false;
                    else
                        c.agora = false;

                    //if (r["lg_multimedida"] != System.DBNull.Value)
                    //    c.multimedida = r["lg_multimedida"].ToString() == "S";
                    //else
                    //    c.multimedida = false;


                    //AÑADIMOS las etiquetas de SAP
                    if (subestados_sap.AreaResponsableMedida(r["cd_subestado"].ToString()))
                    {
                        subestadosKronos.GetEstadoKEE(pendienteWeb_B2B.GetCups(r["cups20"].ToString(),
                            Convert.ToDateTime(r["fh_desde"]), Convert.ToDateTime(r["fh_hasta"])));

                        if (subestadosKronos.existe)
                        {

                            c.subestado_SAP = subestadosKronos.descripcion_subestado;
                            c.cod_subestado_SAP = subestadosKronos.descripcion_subestado.Substring(0, subestadosKronos.descripcion_subestado.IndexOf(" "));
                        }
                    }

                    // Sólo necesitamos los últimos 5 días para el informe                    


                    List<EndesaEntity.medida.Pendiente> o;
                    if (!d.TryGetValue(c.fecha_informe, out o))
                    {

                        o = new List<EndesaEntity.medida.Pendiente>();
                        o.Add(c);
                        d.Add(c.fecha_informe, o);
                    }
                    else
                        o.Add(c);
                }
                db.CloseConnection();

                return d;
            }
            catch (Exception e)
            {
                ficheroLog.addError("CargaPendiente: " + e.Message);
                return null;
            }
        }
        private void InformePendiente_BI_Facturacion(string ruta_salida_archivo, bool automatico)
        {

            MySQLDB db;
            MySqlCommand command;
            MySqlDataReader r;
            string strSql = "";

            //Paco, para controlar el detalle, cuando no hay datos en t_ed_h_ps y hay que buscar en el histórico
            MySQLDB dbAux;
            MySqlCommand commandAux;
            MySqlDataReader rAux;
            string empresa;;
            string nif;
            string cliente;
            string apellido;
            DateTime? FechaAlta;
            DateTime? FechaInicio;
            string Tarifa;
            string contrato;
            string Distribuidora;
            string CadenaAuxiliar;
            //////////////////////////////////////////////////
            ///

            servidores.RedShiftServer dbRS;
            OdbcCommand commandRS;
            OdbcDataReader rRS;

            int c = 1;
            int f = 1;

            DateTime fecha_actual = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            DateTime fecha_registro = new DateTime();
            int meses_pdtes = 0;
            int aniomes = 0;

            bool tiene_complemento_a01 = false;
            bool sacar_portugal = true;

            DateTime fd = new DateTime();
            DateTime fd_tam = new DateTime();
            DateTime udh = new DateTime();

            //MIO
            bool Pinto = true;
            string RangoInterno;
            string RangoPintoGris;
            int tamaño;
            string tamañoanterior = "";
            string cups20;
            string BuscaCadena ;

            utilidades.Fechas utilfecha = new Fechas();

            try
            {

                if (!automatico || (UltimaActualizacionMySQL().Date >
                    ss_pp.GetFecha_FinProceso("Facturación", "Informe Pendiente BI", "Informe Pendiente BI").Date))
                {

                    if (automatico)
                        ss_pp.Update_Fecha_Inicio("Facturación", "Informe Pendiente BI", "Informe Pendiente BI");

                    /*
                    FileInfo plantillaExcel =  new FileInfo(System.Environment.CurrentDirectory +  param.GetValue("plantilla_informe_pendiente"));



                    FileInfo fileInfo = new FileInfo(ruta_salida_archivo);
                    ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.Commercial;
                    ExcelPackage excelPackage = new ExcelPackage(plantillaExcel);

                    var workSheet = excelPackage.Workbook.Worksheets["Resumen ES"];
                    */

                    // *****************************************


                    // Crea un fichero excel dinamicamente
                    //ruta_salida_archivo = "c:\\temp\\DetallePendFact_SAP_20231128_Inventarios_ES_PT_TAM.xlsx";
                    FileInfo fileInfo = new FileInfo(ruta_salida_archivo);
                    ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.Commercial;
                    ExcelPackage excelPackage = new ExcelPackage(fileInfo);
                    //Creo la primera hoja
                    var workSheet = excelPackage.Workbook.Worksheets.Add("Resumen ES");
                    var headerCells = workSheet.Cells[1, 1, 1, 17];
                    var headerFont = headerCells.Style.Font;

                    List<string> lista_empresas_ES = new List<string>();
                    lista_empresas_ES.Add("ES21");
                    lista_empresas_ES.Add("ES22");

                    List<string> lista_empresas_PT = new List<string>();
                    lista_empresas_PT.Add("PT1Q");

                    List<string> lista_segmentos_MT_BTE = new List<string>();
                    lista_segmentos_MT_BTE.Add("MT");
                    lista_segmentos_MT_BTE.Add("BTE");

                    List<string> lista_segmentos_BTN = new List<string>();
                    lista_segmentos_BTN.Add("BTN");

                    // Tomamos lo últimos 5 días hábiles
                    // Si se lanza el listado en día fin de semana
                    // hay que quitar un día más porque el viernes todavía no se ha procesado

                    if (!utilfecha.EsLaborable())
                    {
                        fd = utilfecha.UltimoDiaHabilAnterior(
                               utilfecha.UltimoDiaHabilAnterior(
                                   utilfecha.UltimoDiaHabilAnterior(
                                       utilfecha.UltimoDiaHabilAnterior(
                                           utilfecha.UltimoDiaHabilAnterior(utilfecha.UltimoDiaHabil())))));

                        udh = utilfecha.UltimoDiaHabilAnterior(utilfecha.UltimoDiaHabil());
                    }
                    else
                    {
                        fd = utilfecha.UltimoDiaHabilAnterior(
                                utilfecha.UltimoDiaHabilAnterior(
                                    utilfecha.UltimoDiaHabilAnterior(
                                        utilfecha.UltimoDiaHabilAnterior(utilfecha.UltimoDiaHabil()))));

                        udh = utilfecha.UltimoDiaHabil();
                    }

                    /*
                    //dic_pendiente_hist_fecha = CargaPendienteHist_DesdeFecha(CalculaFechaDesdeinforme(),lista_empresas_ES);

                    fd_tam = utilfecha.UltimoDiaHabilAnterior(utilfecha.UltimoDiaHabil());
                    */
                    int totales_dia = 0;
                    double totales_dia_tam = 0;

                    bool noAgora = false;
                    bool siAgora = true;

                    // Nuevos Totales

                    int totales_noagora_01 = 0;
                    double totales_noagora_tam_01 = 0;

                    int totales_noagora_02 = 0;
                    double totales_noagora_tam_02 = 0;

                    int totales_noagora_03 = 0;
                    double totales_noagora_tam_03 = 0;

                    int totales_noagora_04 = 0;
                    double totales_noagora_tam_04 = 0;

                    int totales_noagora_05 = 0;
                    double totales_noagora_tam_05 = 0;

                    int totales_agora_01 = 0;
                    double totales_agora_tam_01 = 0;

                    int totales_agora_02 = 0;
                    double totales_agora_tam_02 = 0;

                    int totales_agora_03 = 0;
                    double totales_agora_tam_03 = 0;

                    int totales_agora_04 = 0;
                    double totales_agora_tam_04 = 0;

                    int totales_agora_05 = 0;
                    double totales_agora_tam_05 = 0;

                    Dictionary<DateTime, int> dic_Totales_cups = new Dictionary<DateTime, int>();
                    Dictionary<DateTime, double> dic_Totales_tam = new Dictionary<DateTime, double>();

                    dic_dias_estado = CargaDiasEstado();

                    int dia = 0;
                    int dia_tam = 0;
                    int fila;
                    int columna;

                    ///dic_pendiente_hist_fecha = CargaPendienteHist_DesdeFecha(CalculaFechaDesdeinforme(), lista_empresas_ES);

                    fd_tam = utilfecha.UltimoDiaHabilAnterior(utilfecha.UltimoDiaHabil());

                    //********************************************************************************************************************
                    //MIO*****************************************************************************************************************
                    //********************************************************************************************************************

                    int InicioRango;
                    int pintoetiqueta;
                    bool blnPintoEtiqueta;

                    blnPintoEtiqueta = true;
                    int Hoja;
                    List<string> listaEmpresas = new List<string>();
                    List<string> listaSegmentos = new List<string>();

                    var allCells = workSheet.Cells[1, 1, 50, 50];
                    Color colorDeCeldaTitulo = ColorTranslator.FromHtml("#b3e3af");
                    Color colorDeCeldaCabecera = ColorTranslator.FromHtml("#c1dce6");
                    Color colorDeCeldaTotales = ColorTranslator.FromHtml("#e0f5c6");
                    Color colorDeCeldaGris = ColorTranslator.FromHtml("#e8eced");
                    ExcelRange Etiqueta;

                    for (Hoja = 1; Hoja < 4; Hoja++)
                    {

                        if (Hoja == 1)
                        { //RESUMEN_ES

                            listaEmpresas = lista_empresas_ES;
                            listaSegmentos = null;
                            //dic_pendiente_hist_fecha = CargaPendienteHist_DesdeFecha(CalculaFechaDesdeinforme(), lista_empresas_ES);
                            dic_pendiente_hist_fecha = CargaPendienteHist_DesdeFecha(CalculaFechaDesdeinforme(), listaEmpresas);
                        }
                        if (Hoja == 2)
                        {
                            blnPintoEtiqueta = true;
                            Pinto = true;
                            dic_Totales_cups.Clear();
                            dic_Totales_tam.Clear();
                            listaEmpresas = lista_empresas_PT;
                            listaSegmentos = lista_segmentos_MT_BTE;
                            dic_pendiente_hist_fecha = CargaPendienteHist_PT_DesdeFecha(CalculaFechaDesdeinforme(), listaEmpresas, listaSegmentos);
                            dia = 0;
                            dia_tam = 0;
                            //CREO LA HOJA
                            workSheet = excelPackage.Workbook.Worksheets.Add("Resumen POR MT-BTE");
                            headerCells = workSheet.Cells[1, 1, 1, 17];
                            headerFont = headerCells.Style.Font;
                        }


                        if (Hoja == 3)
                        {

                            blnPintoEtiqueta = true;
                            Pinto = true;
                            dic_Totales_cups.Clear();
                            dic_Totales_tam.Clear();
                            listaEmpresas = lista_empresas_PT;
                            listaSegmentos = lista_segmentos_BTN;

                            dic_pendiente_hist_fecha = CargaPendienteHist_PT_DesdeFecha(CalculaFechaDesdeinforme(), lista_empresas_PT, lista_segmentos_BTN);

                            dia = 0;
                            dia_tam = 0;

                            //CREO LA HOJA
                            workSheet = excelPackage.Workbook.Worksheets.Add("Resumen POR BTN");
                            headerCells = workSheet.Cells[1, 1, 1, 17];
                            headerFont = headerCells.Style.Font;
                        }

                        c = 9;
                        // PARTE NO ÁGORA ES ***************************************************
                        //Veo que etiquetas tengo en los dias
                        string[] Guardar;
                        Guardar = new string[5000];
                        int m;
                        m = 0;
                        foreach (KeyValuePair<DateTime, List<EndesaEntity.medida.Pendiente>> p in dic_pendiente_hist_fecha)
                        {
                            dia++;
                            if (dia < 6)
                            {
                                int v = p.Value.Count;
                                for (int i = 0; i < v; i++)
                                {

                                    
                                    /*
                                    if (subestados_sap.AreaResponsableMedida(p.Value[i].cod_subestado))
                                    {
                                        subestadosKronos.GetEstadoKEE(pendienteWeb_B2B.GetCups(p.Value[i].cups20,
                                            Convert.ToDateTime(p.Value[i].fh_desde), Convert.ToDateTime(p.Value[i].fh_hasta)));

                                        if (subestadosKronos.existe)
                                        {

                                            Guardar[m] = p.Value[i].cod_estado + "_" + subestadosKronos.descripcion_subestado.Substring(0, subestadosKronos.descripcion_subestado.IndexOf(" ") ) + "_" + p.Value[i].agora + "_" + subestadosKronos.descripcion_subestado.Substring(subestadosKronos.descripcion_subestado.IndexOf(" ") + 1, subestadosKronos.descripcion_subestado.Length - subestadosKronos.descripcion_subestado.IndexOf(" ") - 1);
                                        }
                                        else
                                        {
                                            Guardar[m] = p.Value[i].cod_estado + "_" + p.Value[i].cod_subestado + "_" + p.Value[i].agora + "_" + p.Value[i].subsEstado;
                                        }
                                    }
                                    else
                                    {
                                        Guardar[m] = p.Value[i].cod_estado + "_" + p.Value[i].cod_subestado + "_" + p.Value[i].agora + "_" + p.Value[i].subsEstado;
                                    }
                                    */

                                    if (p.Value[i].subestado_SAP is null)
                                    {
                                        Guardar[m] = p.Value[i].cod_estado + "_" + p.Value[i].cod_subestado + "_" + p.Value[i].agora + "_" + p.Value[i].subsEstado + "_N";
                                    }
                                    else
                                    {
                                        Guardar[m] = p.Value[i].cod_estado + "_" + p.Value[i].subestado_SAP.Substring(0, p.Value[i].subestado_SAP.IndexOf(" ")) + "_" + p.Value[i].agora + "_" + p.Value[i].subestado_SAP.Substring(p.Value[i].subestado_SAP.IndexOf(" ") + 1, p.Value[i].subestado_SAP.Length - p.Value[i].subestado_SAP.IndexOf(" ") - 1) + "_S";
                                    }



                                    m++;
                                }
                            }
                        }
                        string[] B = Guardar.Distinct().ToArray(); //Aquí ya tengo todas las etiquetas de los días

                        Array.Sort(B); //Ordeno Alfabeticamente

                        dia = 0;

                        //Pego etiquetas
                        workSheet.Cells[1, 1].Value = "INFORME SEGUIMIENTO PENDIENTE FACTURACION TOTAL";
                        workSheet.Cells[1, 1].Style.Font.Bold = true;
                        workSheet.Cells["A1:D1"].Style.Fill.PatternType = ExcelFillStyle.Solid;


                        workSheet.Cells["A1:D1"].Style.Fill.BackgroundColor.SetColor(colorDeCeldaTitulo);
                        workSheet.Cells["A1:D1"].Merge = true;
                        workSheet.Cells["A1:D1"].Style.WrapText = true;

                        workSheet.Cells[3, 1].Value = "ÁGORA (SÍ/NO)";
                        workSheet.Cells[3, 1].Style.Font.Bold = true;
                        workSheet.Cells["A3:A4"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells["A3:A4"].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                        workSheet.Cells["A3:A4"].Style.Fill.BackgroundColor.SetColor(colorDeCeldaCabecera);
                        workSheet.Cells["A3:A4"].Merge = true;
                        workSheet.Cells["A3:A4"].Style.WrapText = true;
                        //workSheet.Cells["A3:A4"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        workSheet.Cells["A3:A4"].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                        //OfficeOpenXml.Style.ExcelHorizontalAlignement

                        workSheet.Cells[3, 2].Value = "RESPONSABLE";
                        workSheet.Cells[3, 2].Style.Font.Bold = true;
                        workSheet.Cells["B3:B4"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells["B3:B4"].Style.Fill.BackgroundColor.SetColor(colorDeCeldaCabecera);
                        workSheet.Cells["B3:B4"].Merge = true;
                        workSheet.Cells["B3:B4"].Style.WrapText = true;
                        workSheet.Cells["B3:B4"].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                        workSheet.Cells["B3:B4"].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                        workSheet.Cells[3, 3].Value = "SUBESTADO";
                        workSheet.Cells[3, 3].Style.Font.Bold = true;
                        workSheet.Cells["C3:C4"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells["C3:C4"].Style.Fill.BackgroundColor.SetColor(colorDeCeldaCabecera);
                        workSheet.Cells["C3:C4"].Merge = true;
                        workSheet.Cells["C3:C4"].Style.WrapText = true;
                        workSheet.Cells["C3:C4"].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                        workSheet.Cells["C3:C4"].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                        workSheet.Cells[3, 4].Value = "Pendiente PS";
                        workSheet.Cells[3, 4].Style.Font.Bold = true;
                        workSheet.Cells["D3:H3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        workSheet.Cells["D3:H3"].Style.Fill.BackgroundColor.SetColor(colorDeCeldaCabecera);
                        workSheet.Cells["D3:H3"].Merge = true;
                        workSheet.Cells["D3:H3"].Style.WrapText = true;
                        workSheet.Cells["D3:H3"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        workSheet.Cells["D3:H3"].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                        foreach (KeyValuePair<DateTime, List<EndesaEntity.medida.Pendiente>> p in dic_pendiente_hist_fecha)
                        {
                            dia++;
                            if (dia < 6)
                            {
                                Console.WriteLine("Totales ES noAgora dia: " + p.Key.ToString("dd/MM/yyyy"));

                                f = 4;
                                c--;

                                workSheet.Cells[f, c].Value = p.Key;
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                                workSheet.Cells[f, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                //colorDeCelda = ColorTranslator.FromHtml("#e6faf5");
                                workSheet.Cells[f, c].Style.Fill.BackgroundColor.SetColor(colorDeCeldaCabecera);
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                for (int i = 1; i < B.Length ; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "01" & cadena[2] == "False") //cadena[2] == "False" ES NO AGORA
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3];
                                        if (cadena[4] == "S")
                                        {              
                                            Etiqueta = workSheet.Cells[f, 3];
                                            Etiqueta.Style.Font.Color.SetColor(System.Drawing.Color.Red); 
                                        }
                                        workSheet.Cells[f, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        ///workSheet.Cells[f, c].Value = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        //System.Windows.Forms.MessageBox.Show(cadena[0] + "-" + cadena[1] + "-" + cadena[2] + "-" +cadena[3]);

                                        //if (Hoja == 1) {
                                        //    workSheet.Cells[f, c].Value = Total_PendienteUno(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1], cadena[4]);
                                        //}
                                        //else
                                        //{
                                            workSheet.Cells[f, c].Value = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        //}
                                        

                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    tamaño = f;
                                    tamaño = tamaño - 1;

                                    if (tamaño >= 5) //empieza en fila 5
                                    {
                                        RangoInterno = "B5:B" + tamaño.ToString();
                                        workSheet.Cells[RangoInterno].Value = "Pendiente medida";
                                        workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                        workSheet.Cells[RangoInterno].Merge = true;
                                        workSheet.Cells[RangoInterno].Style.WrapText = true;
                                        workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                        workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                    }

                                }

                                workSheet.Cells[f, 3].Value = "TotalPendiente medida";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);

                                /*
                                if (Pinto == true)
                                {
                                    colorDeCelda = ColorTranslator.FromHtml("#f0f4f5"); //Color GRIS
                                    RangoInterno = "B" + f.ToString() + ":M" + f.ToString();
                                    workSheet.Cells[RangoInterno].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                    workSheet.Cells[RangoInterno].Style.Fill.BackgroundColor.SetColor(colorDeCelda);
                                }
                                */
                                totales_noagora_01 = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, "01", null);
                                workSheet.Cells[f, c].Value = totales_noagora_01;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                f++;
                                tamañoanterior = f.ToString();

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "02" & cadena[2] == "False")
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3];

                                        workSheet.Cells[f, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        workSheet.Cells[f, c].Value = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    RangoInterno = "B" + tamañoanterior;
                                    tamaño = f;
                                    tamaño = tamaño - 1;

                                    if (tamaño >= Int32.Parse(tamañoanterior))
                                    {
                                        RangoInterno = RangoInterno + ":B" + tamaño.ToString();
                                        workSheet.Cells[RangoInterno].Value = "Orden de Cálculo Calculable";
                                        workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                        workSheet.Cells[RangoInterno].Merge = true;
                                        workSheet.Cells[RangoInterno].Style.WrapText = true;
                                        workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                        workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    }
                                }

                                workSheet.Cells[f, 3].Value = "Total Orden de Cálculo Calculable";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);

                                totales_noagora_02 = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, "02", null);
                                workSheet.Cells[f, c].Value = totales_noagora_02;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;
                                tamañoanterior = f.ToString();

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "03" & cadena[2] == "False")
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3];
  
                                        workSheet.Cells[f, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        workSheet.Cells[f, c].Value = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    RangoInterno = "B" + tamañoanterior;
                                    tamaño = f;
                                    tamaño = tamaño - 1;

                                    if (tamaño >= Int32.Parse(tamañoanterior))
                                    {
                                        RangoInterno = RangoInterno + ":B" + tamaño.ToString();
                                        workSheet.Cells[RangoInterno].Value = "DC Generado sin DI";
                                        workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                        workSheet.Cells[RangoInterno].Merge = true;
                                        workSheet.Cells[RangoInterno].Style.WrapText = true;
                                        workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                        workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    }
                                }

                                workSheet.Cells[f, 3].Value = "Total DC Generado sin DI";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);
                                totales_noagora_03 = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, "03", null);
                                workSheet.Cells[f, c].Value = totales_noagora_03;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;
                                tamañoanterior = f.ToString();

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "04" & cadena[2] == "False")
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3];
   
                                        workSheet.Cells[f, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        workSheet.Cells[f, c].Value = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    RangoInterno = "B" + tamañoanterior;
                                    tamaño = f;
                                    tamaño = tamaño - 1;

                                    if (tamaño >= Int32.Parse(tamañoanterior))
                                    {
                                        RangoInterno = RangoInterno + ":B" + tamaño.ToString();
                                        workSheet.Cells[RangoInterno].Value = "Doc. Impresión Apartado";
                                        workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                        workSheet.Cells[RangoInterno].Merge = true;
                                        workSheet.Cells[RangoInterno].Style.WrapText = true;
                                        workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                        workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    }
                                }

                                workSheet.Cells[f, 3].Value = "Total Doc. Impresión Apartado";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);
                                totales_noagora_04 = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, "04", null);
                                workSheet.Cells[f, c].Value = totales_noagora_04;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;


                                //PARTE 05
                                //f++;
                                tamañoanterior = f.ToString();

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "05" & cadena[2] == "False")
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3];

                                        workSheet.Cells[f, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        workSheet.Cells[f, c].Value = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    RangoInterno = "B" + tamañoanterior;
                                    tamaño = f;
                                    tamaño = tamaño - 1;

                                    if (tamaño >= Int32.Parse(tamañoanterior))
                                    {
                                        RangoInterno = RangoInterno + ":B" + tamaño.ToString();
                                        workSheet.Cells[RangoInterno].Value = "DC no generado MDS";
                                        workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                        workSheet.Cells[RangoInterno].Merge = true;
                                        workSheet.Cells[RangoInterno].Style.WrapText = true;
                                        workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                        workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    }
                                }

                                workSheet.Cells[f, 3].Value = "Total DC no generado MDS";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);
                                totales_noagora_05 = Total_Pendiente(noAgora, p.Key, listaEmpresas, listaSegmentos, "05", null);
                                workSheet.Cells[f, c].Value = totales_noagora_05;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                workSheet.Cells[f, 3].Value = "Total No Ágora";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Value = totales_noagora_01 + totales_noagora_02 + totales_noagora_03 + totales_noagora_04 + totales_noagora_05;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                if (Pinto == true)
                                {

                                    RangoInterno = "A" + f.ToString() + ":M" + f.ToString();
                                    workSheet.Cells[RangoInterno].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                    workSheet.Cells[RangoInterno].Style.Fill.BackgroundColor.SetColor(colorDeCeldaTotales);
                                    workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                }

                                f++;

                                // FIN PARTE 5

                                //f++;
                                tamañoanterior = f.ToString();
                                Pinto = false;

                                int o;
                                if (!dic_Totales_cups.TryGetValue(p.Key, out o))
                                    dic_Totales_cups.Add(p.Key, totales_noagora_01 + totales_noagora_02 + totales_noagora_03 + totales_noagora_04 + totales_noagora_05);

                            } //Fin if (dia < 6)
                        }

                        c = 14;

                        workSheet.Cells[3, 9].Value = "Pendiente Económico (€)";
                        workSheet.Cells[3, 9].Style.Font.Bold = true;
                        workSheet.Cells["I3:M3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //colorDeCelda = ColorTranslator.FromHtml("#c1dce6");          
                        workSheet.Cells["I3:M3"].Style.Fill.BackgroundColor.SetColor(colorDeCeldaCabecera);
                        workSheet.Cells["I3:M3"].Merge = true;
                        workSheet.Cells["I3:M3"].Style.WrapText = true;
                        workSheet.Cells["I3:M3"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        workSheet.Cells["I3:M3"].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                        // NO ÁGORA TAM ES PARTE ECONÓMICO*************************************
                        foreach (KeyValuePair<DateTime, List<EndesaEntity.medida.Pendiente>> p in dic_pendiente_hist_fecha)
                        {
                            Console.WriteLine("Totales TAM ES noAgora dia: " + p.Key.ToString("dd/MM/yyyy"));
                            dia_tam++;

                            if (dia_tam < 6)
                            {
                                f = 4;
                                c--;

                                workSheet.Cells[f, c].Value = p.Key;
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                                workSheet.Cells[f, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                //colorDeCelda = ColorTranslator.FromHtml("#5facad");
                                workSheet.Cells[f, c].Style.Fill.BackgroundColor.SetColor(colorDeCeldaCabecera);
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                f++;

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "01" & cadena[2] == "False")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }
                                totales_noagora_tam_01 = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, "01", null);

                                workSheet.Cells[f, c].Value = totales_noagora_tam_01;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "02" & cadena[2] == "False")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                totales_noagora_tam_02 = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, "02", null);

                                workSheet.Cells[f, c].Value = totales_noagora_tam_02;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "03" & cadena[2] == "False")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                totales_noagora_tam_03 = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, "03", null);

                                workSheet.Cells[f, c].Value = totales_noagora_tam_03;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "04" & cadena[2] == "False")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }
                                totales_noagora_tam_04 = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, "04", null);

                                workSheet.Cells[f, c].Value = totales_noagora_tam_04;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);


                                /*
                                if (blnPintoEtiqueta == true)
                                {
                                    // pego la etíqueta NO ÁGORA
                                    RangoInterno = "A5:A" + f.ToString();

                                    workSheet.Cells[RangoInterno].Value = "NO ÁGORA";
                                    workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                    workSheet.Cells[RangoInterno].Merge = true;
                                    workSheet.Cells[RangoInterno].Style.WrapText = true;
                                    workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                    blnPintoEtiqueta = false;
                                }

                                */

                                f++;

                                //PARTE 5
                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "05" & cadena[2] == "False")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }
                                totales_noagora_tam_05 = Total_Pendiente_TAM(noAgora, p.Key, listaEmpresas, listaSegmentos, "05", null);

                                workSheet.Cells[f, c].Value = totales_noagora_tam_05;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                if (blnPintoEtiqueta == true)
                                {
                                    // pego la etíqueta NO ÁGORA
                                    RangoInterno = "A5:A" + f.ToString();

                                    workSheet.Cells[RangoInterno].Value = "NO ÁGORA";
                                    workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                    workSheet.Cells[RangoInterno].Merge = true;
                                    workSheet.Cells[RangoInterno].Style.WrapText = true;
                                    workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                    workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    blnPintoEtiqueta = false;
                                }

                                f++;

                                //

                                workSheet.Cells[f, c].Value = totales_noagora_tam_01 + totales_noagora_tam_02 + totales_noagora_tam_03 + totales_noagora_tam_04 + totales_noagora_tam_05;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                double o;
                                if (!dic_Totales_tam.TryGetValue(p.Key, out o))
                                    dic_Totales_tam.Add(p.Key, totales_noagora_tam_01 + totales_noagora_tam_02 + totales_noagora_tam_03 + totales_noagora_tam_04 + totales_noagora_tam_05);

                            }
                        }

                        c = 9;
                        dia = 0;
                        f--;
                        InicioRango = f--;

                        int tamañoprimerbloque;
                        tamañoprimerbloque = InicioRango;
                        Pinto = true;
                        blnPintoEtiqueta = true;

                        // ÁGORA ES  BLOQUE PENDIENTE **********************************************
                        foreach (KeyValuePair<DateTime, List<EndesaEntity.medida.Pendiente>> p in dic_pendiente_hist_fecha)
                        {

                            dia++;

                            if (dia < 6)
                            {

                                f = InicioRango;
                                c--;
                                f++;

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "01" & cadena[2] == "True")
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3];
                                        if (cadena[4] == "S")
                                        {
                                            Etiqueta = workSheet.Cells[f, 3];
                                            Etiqueta.Style.Font.Color.SetColor(System.Drawing.Color.Red);
                                        }
                                        workSheet.Cells[f, c].Value = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    tamaño = f;
                                    tamaño = tamaño - 1;
                                    tamañoprimerbloque++;
                                    if (tamaño >= tamañoprimerbloque)
                                    {
                                        RangoInterno = "B" + tamañoprimerbloque.ToString() + ":B" + tamaño.ToString();
                                        if (tamaño >= 1) //TOCADO
                                        {
                                            workSheet.Cells[RangoInterno].Value = "Pendiente medida";
                                            workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                            workSheet.Cells[RangoInterno].Merge = true;
                                            workSheet.Cells[RangoInterno].Style.WrapText = true;
                                            workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                            workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        }
                                    }
                                }

                                workSheet.Cells[f, 3].Value = "TotalPendiente medida";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);

                                /*
                                if (Pinto == true)
                                {
                                    colorDeCelda = ColorTranslator.FromHtml("#f0f4f5"); //Color GRIS
                                    RangoInterno = "B" + f.ToString() + ":M" + f.ToString();
                                    workSheet.Cells[RangoInterno].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                    workSheet.Cells[RangoInterno].Style.Fill.BackgroundColor.SetColor(colorDeCelda);
                                }
                                */
                                totales_agora_01 = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, "01", null);
                                workSheet.Cells[f, c].Value = totales_agora_01;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                f++;
                                tamañoanterior = f.ToString();

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "02" & cadena[2] == "True")
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3]; 
                                        workSheet.Cells[f, c].Value = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    RangoInterno = "B" + tamañoanterior;
                                    tamaño = f;
                                    tamaño = tamaño - 1;

                                    if (tamaño >= Int32.Parse(tamañoanterior))
                                    {
                                        RangoInterno = RangoInterno + ":B" + tamaño.ToString();
                                        workSheet.Cells[RangoInterno].Value = "Orden de Cálculo Calculable";
                                        workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                        workSheet.Cells[RangoInterno].Merge = true;
                                        workSheet.Cells[RangoInterno].Style.WrapText = true;
                                        workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                        workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    }
                                }

                                workSheet.Cells[f, 3].Value = "Total Orden de Cálculo Calculable";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);

                                totales_agora_02 = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, "02", null);
                                workSheet.Cells[f, c].Value = totales_agora_02;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;
                                tamañoanterior = f.ToString();

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "03" & cadena[2] == "True")
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3];
                                        workSheet.Cells[f, c].Value = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    RangoInterno = "B" + tamañoanterior;
                                    tamaño = f;
                                    tamaño = tamaño - 1;

                                    if (tamaño >= Int32.Parse(tamañoanterior))
                                    {
                                        RangoInterno = RangoInterno + ":B" + tamaño.ToString();
                                        workSheet.Cells[RangoInterno].Value = "DC Generado sin DI";
                                        workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                        workSheet.Cells[RangoInterno].Merge = true;
                                        workSheet.Cells[RangoInterno].Style.WrapText = true;
                                        workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                        workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    }
                                }

                                workSheet.Cells[f, 3].Value = "Total DC Generado sin DI";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);

                                totales_agora_03 = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, "03", null);
                                workSheet.Cells[f, c].Value = totales_agora_03;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;
                                tamañoanterior = f.ToString();

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "04" & cadena[2] == "True")
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3];
                                        workSheet.Cells[f, c].Value = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    RangoInterno = "B" + tamañoanterior;
                                    tamaño = f;
                                    tamaño = tamaño - 1;

                                    if (tamaño >= Int32.Parse(tamañoanterior))
                                    {
                                        RangoInterno = RangoInterno + ":B" + tamaño.ToString();
                                        workSheet.Cells[RangoInterno].Value = "Doc. Impresión Apartado";
                                        workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                        workSheet.Cells[RangoInterno].Merge = true;
                                        workSheet.Cells[RangoInterno].Style.WrapText = true;
                                        workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                        workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    }
                                }

                                workSheet.Cells[f, 3].Value = "Total Doc. Impresión Apartado";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);
                                totales_agora_04 = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, "04", null);
                                workSheet.Cells[f, c].Value = totales_agora_04;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                //PARTE 5
                                tamañoanterior = f.ToString();

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "05" & cadena[2] == "True")
                                    {
                                        workSheet.Cells[f, 3].Value = cadena[1] + " " + cadena[3];
                                        workSheet.Cells[f, c].Value = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                if (Pinto == true)
                                {
                                    RangoInterno = "B" + tamañoanterior;
                                    tamaño = f;
                                    tamaño = tamaño - 1;

                                    if (tamaño >= Int32.Parse(tamañoanterior))
                                    {
                                        RangoInterno = RangoInterno + ":B" + tamaño.ToString();
                                        workSheet.Cells[RangoInterno].Value = "Total DC no generado MDS";
                                        workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                        workSheet.Cells[RangoInterno].Merge = true;
                                        workSheet.Cells[RangoInterno].Style.WrapText = true;
                                        workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                        workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    }
                                }

                                workSheet.Cells[f, 3].Value = "Total DC no generado MDS";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                RangoPintoGris = "B" + f.ToString() + ":C" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                RangoPintoGris = "B" + f.ToString() + ":M" + f.ToString();
                                workSheet.Cells[RangoPintoGris].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                workSheet.Cells[RangoPintoGris].Style.Fill.BackgroundColor.SetColor(colorDeCeldaGris);
                                totales_agora_05 = Total_Pendiente(siAgora, p.Key, listaEmpresas, listaSegmentos, "05", null);
                                workSheet.Cells[f, c].Value = totales_agora_05;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                //FIN PARTE 5

                                workSheet.Cells[f, 3].Value = "Total Si Ágora";
                                workSheet.Cells[f, 3].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Value = totales_agora_01 + totales_agora_02 + totales_agora_03 + totales_agora_04 + totales_agora_05;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                if (Pinto == true)
                                {
                                    //colorDeCelda = ColorTranslator.FromHtml("#e0f5c6"); //Color verde claro
                                    RangoInterno = "A" + f.ToString() + ":M" + f.ToString();
                                    workSheet.Cells[RangoInterno].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                    workSheet.Cells[RangoInterno].Style.Fill.BackgroundColor.SetColor(colorDeCeldaTotales);
                                    workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                }

                                f++;

                                workSheet.Cells[f, 3].Value = "Total General";

                                if (Pinto == true)
                                {
                                    //colorDeCelda = ColorTranslator.FromHtml("#c1dce6"); //Color azul claro
                                    RangoInterno = "A" + f.ToString() + ":M" + f.ToString();
                                    workSheet.Cells[RangoInterno].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                    workSheet.Cells[RangoInterno].Style.Fill.BackgroundColor.SetColor(colorDeCeldaCabecera);
                                    workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                }

                                //f++;

                                tamañoanterior = f.ToString();
                                Pinto = false;

                                int o;
                                if (dic_Totales_cups.TryGetValue(p.Key, out o))
                                {
                                    workSheet.Cells[f, c].Value = o + totales_agora_01 + totales_agora_02 + totales_agora_03 + totales_agora_04 + totales_agora_05;
                                    workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                    workSheet.Cells[f, c].Style.Font.Bold = true;
                                    workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                }
                            }
                        }

                        c = 14;
                        dia_tam = 0;
                        pintoetiqueta = InicioRango;
                        pintoetiqueta++;

                        // ÁGORA TAM ES PARTE ECONÓMICA ************************************
                        foreach (KeyValuePair<DateTime, List<EndesaEntity.medida.Pendiente>> p in dic_pendiente_hist_fecha)
                        {

                            Console.WriteLine("Totales TAM ES siAgora dia: " + p.Key.ToString("dd/MM/yyyy"));

                            dia_tam++;

                            if (dia_tam < 6)
                            {
                                f = InicioRango;
                                c--;
                                f++;
                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "01" & cadena[2] == "True")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }
                                totales_agora_tam_01 = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, "01", null);

                                workSheet.Cells[f, c].Value = totales_agora_tam_01;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "02" & cadena[2] == "True")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                totales_agora_tam_02 = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, "02", null);

                                workSheet.Cells[f, c].Value = totales_agora_tam_02;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "03" & cadena[2] == "True")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }

                                totales_agora_tam_03 = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, "03", null);

                                workSheet.Cells[f, c].Value = totales_agora_tam_03;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "04" & cadena[2] == "True")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }
                                totales_agora_tam_04 = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, "04", null);

                                workSheet.Cells[f, c].Value = totales_agora_tam_04;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                f++;

                                //PARTE 5
                                for (int i = 1; i < B.Length; i++) //Quito i=0  ya que en el primer item están los nulos que no he rellenado al poner limite 5000
                                {
                                    string[] cadena = B[i].Split('_');
                                    if (cadena[0] == "05" & cadena[2] == "True")
                                    {
                                        //workSheet.Cells[f, 3].Value = cadena[1];
                                        workSheet.Cells[f, c].Value = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, cadena[0], cadena[1]);
                                        workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0";
                                        workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                        f++;
                                    }
                                }
                                totales_agora_tam_05 = Total_Pendiente_TAM(siAgora, p.Key, listaEmpresas, listaSegmentos, "05", null);

                                workSheet.Cells[f, c].Value = totales_agora_tam_05;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                // FIN PARTE 5

                                if (blnPintoEtiqueta == true)
                                {
                                    // pego la etíqueta SI ÁGORA
                                    RangoInterno = "A" + pintoetiqueta.ToString() + ":A" + f.ToString();

                                    workSheet.Cells[RangoInterno].Value = "SI ÁGORA";
                                    workSheet.Cells[RangoInterno].Style.Font.Bold = true;
                                    workSheet.Cells[RangoInterno].Merge = true;
                                    workSheet.Cells[RangoInterno].Style.WrapText = true;
                                    workSheet.Cells[RangoInterno].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;
                                    workSheet.Cells[RangoInterno].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                    blnPintoEtiqueta = false;

                                }

                                f++;

                                workSheet.Cells[f, c].Value = totales_agora_tam_01 + totales_agora_tam_02 + totales_agora_tam_03 + totales_agora_tam_04 + totales_agora_tam_05;
                                workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                workSheet.Cells[f, c].Style.Font.Bold = true;
                                workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                f++;

                                double o;
                                if (dic_Totales_tam.TryGetValue(p.Key, out o))
                                {
                                    workSheet.Cells[f, c].Value = o + totales_agora_tam_01 + totales_agora_tam_02 + totales_agora_tam_03 + totales_agora_tam_04 + totales_agora_tam_05;
                                    workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                                    workSheet.Cells[f, c].Style.Font.Bold = true;
                                    workSheet.Cells[f, c].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                }

                                RangoInterno = "A1" + ":M" + f.ToString();
                                workSheet.Cells[RangoInterno].AutoFitColumns();
                                //El autofit parece no funcionar bien en las dos primeras columnas, las que están combinadas celdas, fuerzo el ancho
                                workSheet.Column(1).Width = 15;
                                workSheet.Column(2).Width = 20;
                            }

                            //allCells = workSheet.Cells[1, 1, f, 13];
                            //allCells.AutoFitColumns();

                        }

                        //excelPackage.SaveAs(fileInfo);

                    } //Bucle HOJA

                    //********************************************************************************************************************
                    //FIN MIO ************************************************************************************************************
                    //********************************************************************************************************************

                    #region Detalle ES

                    f = 1;
                    c = 1;

                    subestadosKronos = new medida.EstadosSubestadosKronos();
                    subestados_sap = new Pendiente_Subestados();
                    pendienteWeb_B2B = new medida.pendiente.PendienteWeb_B2B();
                    pendienteSAPKEE= new medida.pendiente.PendienteFacturadoSAPKEE();

                    workSheet = excelPackage.Workbook.Worksheets.Add("Detalle ES");
                    headerCells = workSheet.Cells[1, 1, 1, 17];
                    headerFont = headerCells.Style.Font;

                    headerCells = workSheet.Cells[1, 1, 1, 30];
                    headerFont = headerCells.Style.Font;
                    headerFont.Bold = true;

                    workSheet.View.FreezePanes(2, 1);
             
                    headerFont.Bold = true;
                    workSheet.Cells[f, c].Value = "EMPRESA"; c++;
                    workSheet.Cells[f, c].Value = "TIPO CLIENTE"; c++;
                    workSheet.Cells[f, c].Value = "NIF"; c++;
                    workSheet.Cells[f, c].Value = "CLIENTE"; c++;
                    workSheet.Cells[f, c].Value = "FALTACONT"; c++;
                    workSheet.Cells[f, c].Value = "FPSERCON"; c++;
                    workSheet.Cells[f, c].Value = "CUPS20"; c++;
                    workSheet.Cells[f, c].Value = "FH_DESDE"; c++;
                    workSheet.Cells[f, c].Value = "FH_HASTA"; c++;
                    workSheet.Cells[f, c].Value = "FH_BAJA_SALESFORCE"; c++;
                    workSheet.Cells[f, c].Value = "FH_BAJA_SAP"; c++;
                    workSheet.Cells[f, c].Value = "Nº INSTALACIÓN"; c++;
                    workSheet.Cells[f, c].Value = "TARIFA"; c++;
                    workSheet.Cells[f, c].Value = "CONTRATO"; c++;
                    workSheet.Cells[f, c].Value = "MES"; c++;
                    workSheet.Cells[f, c].Value = "DISTRIBUIDORA"; c++;
                    workSheet.Cells[f, c].Value = "ESTADO"; c++;
                    workSheet.Cells[f, c].Value = "SUBESTADO"; c++;
                    workSheet.Cells[f, c].Value = "MULTIMEDIDA"; c++;
                    workSheet.Cells[f, c].Value = "TAM"; c++;
                    workSheet.Cells[f, c].Value = "MESES PDTES FACTURAR"; c++;
                    workSheet.Cells[f, c].Value = "ULT FH DESDE FACTURADA"; c++;
                    workSheet.Cells[f, c].Value = "ULT FH HASTA FACTURADA"; c++;
                    workSheet.Cells[f, c].Value = "IMPORTE PDTE FACTURAR"; c++;
                    workSheet.Cells[f, c].Value = "ÁGORA"; c++;
                    workSheet.Cells[f, c].Value = "Estado periodo KEE"; c++;
                    workSheet.Cells[f, c].Value = "Área responsable KEE"; c++;
                    workSheet.Cells[f, c].Value = "Subestado KEE"; c++;
                    workSheet.Cells[f, c].Value = "Estado KEE"; c++;
                    workSheet.Cells[f, c].Value = "Fecha BAJA KEE"; c++;
                    workSheet.Cells[f, c].Value = "Discrepancias";

                    //for (int i = 1; i <= c; i++)
                    //{
                    //    workSheet.Cells[f, i].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    //    workSheet.Cells[f, i].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                    //}

                    DateTime fecha_informe = CalculaFechaDetalle();

                    //////strSql = "SELECT ps.cd_empr, ps.cd_nif_cif_cli, ps.de_tp_cli, ps.tx_apell_cli,"
                    //////    + " ps.fh_alta_crto, ps.fh_inicio_vers_crto, p.cd_cups as cups20, p.fh_desde, p.fh_hasta, p.id_instalacion, ps.cd_tarifa_c,"
                    //////    + " ps.cd_crto_comercial, ps.de_empr_distdora_nombre, p.lg_multimedida, p.cd_subestado,"
                    //////    + " concat(p.cd_estado,' ',de.de_estado) as de_estado, concat(p.cd_subestado,' ',if (ds.de_subestado is null,'', ds.de_subestado)) as de_subestado, p.fh_periodo as mes, p.agora, p.TAM"
                    //////    + " ps.fh_prev_fin_crto, ps.fh_baja_crto"
                    //////    + " FROM fact.t_ed_h_sap_pendiente_facturar_agrupado p"
                    //////    + " LEFT OUTER JOIN cont.t_ed_h_ps ps ON"
                    //////    + " ps.cups20 = p.cd_cups"
                    //////    + " LEFT OUTER JOIN fact.t_ed_p_estado_sap_pendiente_facturar de on"
                    //////    + " de.cd_estado = p.cd_estado"
                    //////    + " LEFT OUTER JOIN fact.t_ed_p_subestado_sap_pendiente_facturar ds on"
                    //////    + " ds.cd_subestado = p.cd_subestado"
                    //////    + " where p.fh_envio = '" + fecha_informe.Date.ToString("yyyy-MM-dd") + "' and"
                        //+ " p.cd_cups = 'ES0021000001531208ZA' and"

                        //+ " where year(p.fec_act)  = " + fecha_informe.Date.ToString("yyyy")
                        //+ " AND month(p.fec_act)  ="  + fecha_informe.Date.ToString("MM")
                        //+ " AND day(p.fec_act) = " + fecha_informe.Date.ToString("dd") + " and"

                        //////+ " p.cd_empr_titular in ('ES21','ES22')" ;

                    strSql = DetalleExcel(fecha_informe, lista_empresas_ES, null);

                    Boolean Existetedhps;

                    db = new MySQLDB(MySQLDB.Esquemas.GBL);
                    command = new MySqlCommand(strSql, db.con);
                    r = command.ExecuteReader();
                    while (r.Read())
                    {
                        f++;
                        c = 1;

                        empresa = "";;
                        nif="";
                        cliente="";
                        apellido="";
                        FechaAlta = null;
                        FechaInicio = null;
                        Tarifa="";
                        contrato="";
                        Distribuidora="";

                        if (r["cd_empr"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = r["cd_empr"].ToString();
                            Existetedhps = true;
                        }
                        else
                        {
                            Existetedhps = false;

                            strSql = "SELECT cd_empr,  cd_nif_cif_cli, de_tp_cli, tx_apell_cli, fh_alta_crto, fh_inicio_vers_crto"
                            + " ,ps.cd_tarifa_c, ps.cd_crto_comercial, ps.de_empr_distdora_nombre"
                            + " FROM cont.t_ed_h_ps_hist ps"
                            + " WHERE cups20 = '" + r["cups20"].ToString() + "'"
                            + " AND created_date = (SELECT MAX(created_date) FROM cont.t_ed_h_ps_hist"
                            + " WHERE cups20 = '" + r["cups20"].ToString() + "')";

                            dbAux = new MySQLDB(MySQLDB.Esquemas.GBL);
                            commandAux = new MySqlCommand(strSql, dbAux.con);
                            rAux = commandAux.ExecuteReader();
                            while (rAux.Read())
                            {
                                if (rAux["cd_empr"] != System.DBNull.Value)
                                    empresa = rAux["cd_empr"].ToString();
                                if (rAux["de_tp_cli"] != System.DBNull.Value)
                                    cliente = rAux["de_tp_cli"].ToString();
                                if (rAux["cd_nif_cif_cli"] != System.DBNull.Value)
                                    nif = rAux["cd_nif_cif_cli"].ToString();
                                if (rAux["tx_apell_cli"] != System.DBNull.Value)
                                    apellido = rAux["tx_apell_cli"].ToString();
                                if (rAux["fh_alta_crto"] != System.DBNull.Value)
                                    FechaAlta = Convert.ToDateTime(rAux["fh_alta_crto"]).Date;
                                if (rAux["fh_inicio_vers_crto"] != System.DBNull.Value)
                                    FechaInicio = Convert.ToDateTime(rAux["fh_inicio_vers_crto"]).Date;
                                if (rAux["cd_tarifa_c"] != System.DBNull.Value)
                                    Tarifa = rAux["cd_tarifa_c"].ToString();
                                if (rAux["cd_crto_comercial"] != System.DBNull.Value)
                                    contrato = rAux["cd_crto_comercial"].ToString();
                                if (rAux["de_empr_distdora_nombre"] != System.DBNull.Value)
                                    Distribuidora = rAux["de_empr_distdora_nombre"].ToString();
                            }
                            dbAux.CloseConnection();
                            workSheet.Cells[f, c].Value = empresa;
                        }
                        c++;

                        if (Existetedhps == false)
                        {
                            workSheet.Cells[f, c].Value = cliente;
                        }
                        else {
                            if (r["de_tp_cli"] != System.DBNull.Value)
                                workSheet.Cells[f, c].Value = r["de_tp_cli"].ToString();
                        }   
                        c++;

                        if (Existetedhps == false)
                        {
                            workSheet.Cells[f, c].Value = nif;
                        }
                        else
                        {
                            if (r["cd_nif_cif_cli"] != System.DBNull.Value)
                                workSheet.Cells[f, c].Value = r["cd_nif_cif_cli"].ToString();
                        }  
                        c++;

                        if (Existetedhps == false)
                        {
                            workSheet.Cells[f, c].Value = apellido;
                        }
                        else
                        {
                            if (r["tx_apell_cli"] != System.DBNull.Value)
                                workSheet.Cells[f, c].Value = r["tx_apell_cli"].ToString();
                        }   
                        c++;

                        if (Existetedhps == false)
                        {
                            if (FechaAlta != null)
                            {
                                workSheet.Cells[f, c].Value = Convert.ToDateTime(FechaAlta).Date;
                                workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                            }
                        }
                        else
                        {
                            if (r["fh_alta_crto"] != System.DBNull.Value)
                            {
                                workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_alta_crto"]).Date;
                                workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                            }
                        }
                        
                        c++;

                        if (Existetedhps == false)
                        {
                            if (FechaInicio != null)
                            {
                                workSheet.Cells[f, c].Value = Convert.ToDateTime(FechaInicio).Date;
                                workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                            }
                        }
                        else
                        {
                            if (r["fh_inicio_vers_crto"] != System.DBNull.Value)
                            {
                                workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_inicio_vers_crto"]).Date;
                                workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                            }
                        }      
                        c++;

                        if (r["cups20"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = r["cups20"].ToString();
                            cups20 = r["cups20"].ToString();
                        }
                        c++;

                        if (r["fh_desde"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_desde"]).Date;
                            workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                        }
                        c++;

                        if (r["fh_hasta"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_hasta"]).Date;
                            workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                        }
                        c++;
                        if (r["fh_baja_crto"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_baja_crto"]).Date;
                            workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;

                        }
                        else {
                            ////////if (r["fh_prev_fin_crto"] != System.DBNull.Value)
                            ////////{
                            ////////    workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_prev_fin_crto"]).Date;
                            ////////    workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;

                            ////////}
                        }
                        c++;


                        //Paco, buscamos la fecha de Baja de SAP ******************************************
                        CadenaAuxiliar = r["id_crto_ext"].ToString();
                        CadenaAuxiliar= CadenaAuxiliar.PadLeft(12,'0'); //Relleno con ceros a la izquierda hasta 12
                        strSql = "SELECT  max(cd_sec_crto), fh_baja from ed_owner.t_ed_h_sap_crto_front "
                        + " WHERE id_crto_ext = '" + CadenaAuxiliar + "'"
                        + " group by  fh_baja"
                        + " order by  max(cd_sec_crto) desc";

                        dbRS = new servidores.RedShiftServer(RedShiftServer.Entornos.PROD);
                        commandRS = new OdbcCommand(strSql, dbRS.con);
                        rRS = commandRS.ExecuteReader();
                        while (rRS.Read())
                        {
                            if (rRS["fh_baja"] != System.DBNull.Value)
                                workSheet.Cells[f, c].Value = Convert.ToDateTime(rRS["fh_baja"]).Date;
                                workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                            break;
                        }
                        dbRS.CloseConnection();
                        c++;

                        //Fin - Fh_baja de SAP ***************************************************

                        if (r["id_instalacion"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["id_instalacion"].ToString();
                        c++;

                        if (Existetedhps == false)
                        {
                            workSheet.Cells[f, c].Value = Tarifa;
                        }
                        else
                        {
                            if (r["cd_tarifa_c"] != System.DBNull.Value)
                                workSheet.Cells[f, c].Value = r["cd_tarifa_c"].ToString();
                        }
                        c++;

                        if (Existetedhps == false)
                        {
                            workSheet.Cells[f, c].Value = contrato;
                        }
                        else
                        {
                            if (r["cd_crto_comercial"] != System.DBNull.Value)
                                workSheet.Cells[f, c].Value = r["cd_crto_comercial"].ToString();
                        }
                        c++;

                        if (r["mes"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToInt32(r["mes"]);
                            aniomes = Convert.ToInt32(r["mes"]);
                            fecha_registro = new DateTime(Convert.ToInt32(aniomes.ToString().Substring(0, 4)),
                                Convert.ToInt32(aniomes.ToString().Substring(4, 2)), 1);
                        }
                        c++;

                        if (Existetedhps == false)
                        {
                            workSheet.Cells[f, c].Value = Distribuidora;
                        }
                        else
                        {
                            if (r["de_empr_distdora_nombre"] != System.DBNull.Value)
                                workSheet.Cells[f, c].Value = r["de_empr_distdora_nombre"].ToString();
                        }  
                        c++;

                        if (r["de_estado"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_estado"].ToString();
                        c++;

                        if (r["de_subestado"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_subestado"].ToString();
                        c++;

                        if (r["cups20"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = GetDiasEstado(r["cups20"].ToString());
                            workSheet.Cells[f, c].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        }
                        c++;

                        if (r["TAM"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDouble(r["TAM"]);
                            workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                        }
                        c++;

                        if (r["mes"] != System.DBNull.Value)
                        {
                            //int meses_pdtes = mes_actual - Convert.ToInt32(r["mes"]);
                            meses_pdtes = ((fecha_actual.Year - fecha_registro.Year) * 12) + fecha_actual.Month - fecha_registro.Month;
                            workSheet.Cells[f, c].Value = meses_pdtes;
                            workSheet.Cells[f, c].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        }
                        c++;

                        // Paco - añadimos la ultima fecha desde y hasta facturada t_ed_h_sap_facts
                        workSheet.Cells[f, c].Value = pendienteSAPKEE.GetCupsInicioUltimaFacturada(r["cups20"].ToString()); c++;
                        workSheet.Cells[f, c].Value = pendienteSAPKEE.GetCupsFinalUltimaFacturada(r["cups20"].ToString()); c++;


                        if (r["mes"] != System.DBNull.Value && r["TAM"] != System.DBNull.Value)
                        {
                            //int meses_pdtes = mes_actual - Convert.ToInt32(r["mes"]);
                            meses_pdtes = ((fecha_actual.Year - fecha_registro.Year) * 12) + fecha_actual.Month - fecha_registro.Month;
                            workSheet.Cells[f, c].Value = Convert.ToDouble(r["tam"]) * meses_pdtes;
                            workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00"; c++;
                        }
                        else
                        {
                            c++;
                        }

                        if (r["agora"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["agora"].ToString();

                        workSheet.Cells[f, c].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        c++;


                        //////if (r["cups20"].ToString() == "ES0021000001531208ZA")
                        //////{

                        //////    System.Windows.Forms.MessageBox.Show("");
                        //////};

                        if (subestados_sap.AreaResponsableMedida(r["cd_subestado"].ToString()))
                        {

                            subestadosKronos.existe = false;

                            //Paco -- He duplicado funciones para marcar los casos que no hay datos en kronos para la fecha GetEstadoKEEDetalle y GetCupsDetalle
                            //Faltaria controlar los casos en los que vienen segmentos, es decir, para el mes que se mira de Sap vienen dos segmentos
                            //en Kronos, habria que quedarse con el de fecha más antigua, he puesto codigo sin probar para este caso en GetCupsDetalle
                            //Lo que hago es crear a pelo un estado "Discrepancia: ..... " que es la etiqueta que pongo y que no está en la tabla parametrica estados_kee_param 
                            subestadosKronos.GetEstadoKEEDetalle(pendienteWeb_B2B.GetCupsDetalle(r["cups20"].ToString(),
                                Convert.ToDateTime(r["fh_desde"]), Convert.ToDateTime(r["fh_hasta"])));

                            if (subestadosKronos.existe)
                            {
                                BuscaCadena= subestadosKronos.descripcion_estado;
                                List<string> lista = new List<string>();

                                if (BuscaCadena.IndexOf("Discrepancia") >= 0)
                                {
                                    workSheet.Cells[f, c].Value = ""; c++;
                                    workSheet.Cells[f, c].Value = ""; c++;
                                    workSheet.Cells[f, c].Value = ""; c++;
                                    workSheet.Cells[f, c].Value = ""; c++;
                                    lista = pendienteWeb_B2B.GetCupsFinKEE(r["cups20"].ToString(), Convert.ToDateTime(r["fh_desde"]), Convert.ToDateTime(r["fh_hasta"]));

                                    if (lista.Count == 0)
                                    {
                                        workSheet.Cells[f, c].Value = ""; c++;
                                    }
                                    else
                                    {
                                        if (lista[0] == "01/01/0001 0:00:00")
                                        {
                                            workSheet.Cells[f, c].Value = ""; c++;
                                        }
                                        else
                                        {
                                            workSheet.Cells[f, c].Value = lista; c++;
                                        }
                                    }
                                    workSheet.Cells[f, c].Value = subestadosKronos.descripcion_estado; c++;

                                }
                                else
                                {
                                    workSheet.Cells[f, c].Value = subestadosKronos.estado_periodo; c++;
                                    workSheet.Cells[f, c].Value = subestadosKronos.area_responsable; c++;
                                    workSheet.Cells[f, c].Value = subestadosKronos.descripcion_subestado; c++;
                                    workSheet.Cells[f, c].Value = subestadosKronos.descripcion_estado; c++;
                                    lista= pendienteWeb_B2B.GetCupsFinKEE(r["cups20"].ToString(), Convert.ToDateTime(r["fh_desde"]), Convert.ToDateTime(r["fh_hasta"]));
                                    if (lista.Count == 0)
                                    {
                                        workSheet.Cells[f, c].Value = ""; c++;
                                    }
                                    else
                                    {
                                        if (lista[0] == "01/01/0001 0:00:00")
                                        {
                                            workSheet.Cells[f, c].Value = ""; c++;
                                        }
                                        else
                                        {
                                            workSheet.Cells[f, c].Value = lista; c++;
                                        }
                                    }
                                }
              
                            }

  
                        }
                        System.Diagnostics.Debug.WriteLine(r["cups20"].ToString() + "-" + r["de_subestado"].ToString() + "-" + subestadosKronos.descripcion_subestado + "-" + subestadosKronos.descripcion_estado);
                        //Para que llegue hasta la última columna aunque no exista en Kronos
                        workSheet.Cells[f, c].Value = ""; c++;
                        workSheet.Cells[f, c].Value = ""; c++;
                        workSheet.Cells[f, c].Value = ""; c++;
                        workSheet.Cells[f, c].Value = ""; c++;
                        workSheet.Cells[f, c].Value = ""; c++;
                        workSheet.Cells[f, c].Value = ""; c++;
                    }
                    db.CloseConnection();

                    headerCells = workSheet.Cells[1, 1, 1, c];
                    headerFont = headerCells.Style.Font;
                    headerFont.Bold = true;
                    allCells = workSheet.Cells[1, 1, f, c];

                    allCells.AutoFitColumns();

                    //workSheet.View.FreezePanes(2, 1);
                    //workSheet.Cells["A1:S1"].AutoFilter = true;
                    //allCells.AutoFitColumns();

                    #endregion

                    #region Detalle POR MT-BTE
                    f = 1;
                    c = 1;

                    workSheet = excelPackage.Workbook.Worksheets.Add("Detalle POR MT-BTE");
                    headerCells = workSheet.Cells[1, 1, 1, 17];
                    headerFont = headerCells.Style.Font;


                    headerCells = workSheet.Cells[1, 1, 1, 30];
                    headerFont = headerCells.Style.Font;
                    headerFont.Bold = true;
                    allCells = workSheet.Cells[1, 1, 50, 50];




                    //for (int i = 1; i <= c; i++)
                    //{
                    //    workSheet.Cells[f, i].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    //    workSheet.Cells[f, i].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                    //}

                    //Ponemos columnas directamente
                    workSheet.Cells[1, 1].Value = "EMPRESA";
                    workSheet.Cells[1, 2].Value = "SEGMENTO";
                    workSheet.Cells[1, 3].Value = "TIPO CLIENTE";
                    workSheet.Cells[1, 4].Value = "NIF";
                    workSheet.Cells[1, 5].Value = "CLIENTE";
                    workSheet.Cells[1, 6].Value = "FALTACONT";
                    workSheet.Cells[1, 7].Value = "FPSERCON";
                    workSheet.Cells[1, 8].Value = "CUPS20";
                    workSheet.Cells[1, 9].Value = "Nº INSTALACIÓN";
                    workSheet.Cells[1, 10].Value = "TARIFA";
                    workSheet.Cells[1, 11].Value = "CONTRATO";
                    workSheet.Cells[1, 12].Value = "MES";
                    workSheet.Cells[1, 13].Value = "DISTRIBUIDORA";
                    workSheet.Cells[1, 14].Value = "ESTADO";
                    workSheet.Cells[1, 15].Value = "SUBESTADO";
                    workSheet.Cells[1, 16].Value = "DIAS ESTADO";
                    workSheet.Cells[1, 17].Value = "TAM";
                    workSheet.Cells[1, 18].Value = "MESES PDTES FACTURAR";
                    workSheet.Cells[1, 19].Value = "IMPORTE PDTE FACTURAR";
                    workSheet.Cells[1, 20].Value = "ÁGORA"; 
                    workSheet.Cells[1, 21].Value = "Estado periodo KEE"; 
                    workSheet.Cells[1, 22].Value = "Área responsable KEE"; 
                    workSheet.Cells[1, 23].Value = "Subestado KEE";
                    workSheet.Cells[1, 24].Value = "Estado KEE";

                    strSql = "SELECT ps.cd_empr, ps.cd_tp_tension, ps.cd_nif_cif_cli, ps.de_tp_cli, ps.tx_apell_cli,"
                        + " ps.fh_alta_crto, ps.fh_inicio_vers_crto, p.cd_cups as cups20, p.id_instalacion, ps.cd_tarifa_c,"
                        + " ps.cd_crto_comercial, ps.de_empr_distdora_nombre,  p.lg_multimedida,"
                        + " concat(p.cd_estado,' ',de.de_estado) as de_estado, concat(p.cd_subestado,' ',ds.de_subestado) as de_subestado, p.fh_periodo as mes, p.agora, p.TAM"
                        + " FROM fact.t_ed_h_sap_pendiente_facturar_agrupado p"
                        + " LEFT OUTER JOIN cont.t_ed_h_ps_pt ps ON"
                        + " ps.cups20 = p.cd_cups"
                        + " LEFT OUTER JOIN fact.t_ed_p_estado_sap_pendiente_facturar de on"
                        + " de.cd_estado = p.cd_estado"
                        + " LEFT OUTER JOIN fact.t_ed_p_subestado_sap_pendiente_facturar ds on"
                        + " ds.cd_subestado = p.cd_subestado"
                        + " where p.fh_envio = '" + fecha_informe.Date.ToString("yyyy-MM-dd") + "' and"
                        + " p.cd_empr_titular = 'PT1Q' and ps.cd_tp_tension in ('MT','BTE')";


                    strSql = DetalleExcel(fecha_informe, lista_empresas_PT, lista_segmentos_MT_BTE);

                    db = new MySQLDB(MySQLDB.Esquemas.GBL);
                    command = new MySqlCommand(strSql, db.con);
                    r = command.ExecuteReader();
                    while (r.Read())
                    {
                        f++;
                        c = 1;

                        if (r["cd_empr"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_empr"].ToString();
                        c++;

                        if (r["cd_tp_tension"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_tp_tension"].ToString();
                        c++;

                        if (r["de_tp_cli"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_tp_cli"].ToString();
                        c++;

                        if (r["cd_nif_cif_cli"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_nif_cif_cli"].ToString();
                        c++;

                        if (r["tx_apell_cli"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["tx_apell_cli"].ToString();
                        c++;

                        if (r["fh_alta_crto"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_alta_crto"]).Date;
                            workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                        }
                        c++;

                        if (r["fh_inicio_vers_crto"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_inicio_vers_crto"]).Date;
                            workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                        }
                        c++;

                        if (r["cups20"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cups20"].ToString();
                        c++;

                        if (r["id_instalacion"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["id_instalacion"].ToString();
                        c++;

                        if (r["cd_tarifa_c"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_tarifa_c"].ToString();
                        c++;

                        if (r["cd_crto_comercial"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_crto_comercial"].ToString();
                        c++;

                        if (r["mes"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToInt32(r["mes"]);
                            aniomes = Convert.ToInt32(r["mes"]);
                            fecha_registro = new DateTime(Convert.ToInt32(aniomes.ToString().Substring(0, 4)),
                                Convert.ToInt32(aniomes.ToString().Substring(4, 2)), 1);
                        }
                        c++;

                        if (r["de_empr_distdora_nombre"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_empr_distdora_nombre"].ToString();
                        c++;

                        if (r["de_estado"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_estado"].ToString();
                        c++;

                        if (r["de_subestado"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_subestado"].ToString();
                        c++;

                        //if (r["lg_multimedida"] != System.DBNull.Value)
                        //{
                        //    workSheet.Cells[f, c].Value = r["lg_multimedida"].ToString();

                        //}
                        //else
                        //{
                        //    workSheet.Cells[f, c].Value = "N";
                        //}

                        workSheet.Cells[f, c].Value = GetDiasEstado(r["cups20"].ToString());

                        workSheet.Cells[f, c].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        c++;

                        if (r["TAM"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDouble(r["TAM"]);
                            workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                        }
                        c++;


                        if (r["mes"] != System.DBNull.Value)
                        {
                            //int meses_pdtes = mes_actual - Convert.ToInt32(r["mes"]);
                            meses_pdtes = ((fecha_actual.Year - fecha_registro.Year) * 12) + fecha_actual.Month - fecha_registro.Month;
                            workSheet.Cells[f, c].Value = meses_pdtes;
                            workSheet.Cells[f, c].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        }
                        c++;


                        if (r["mes"] != System.DBNull.Value && r["TAM"] != System.DBNull.Value)
                        {
                            //int meses_pdtes = mes_actual - Convert.ToInt32(r["mes"]);
                            meses_pdtes = ((fecha_actual.Year - fecha_registro.Year) * 12) + fecha_actual.Month - fecha_registro.Month;
                            workSheet.Cells[f, c].Value = Convert.ToDouble(r["tam"]) * meses_pdtes;
                            workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00"; c++;
                        }
                        else
                        {
                            c++;
                        }

                        if (r["agora"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["agora"].ToString();

                        workSheet.Cells[f, c].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        c++;

                        if (subestados_sap.AreaResponsableMedida(r["cd_subestado"].ToString()))
                        {
                            subestadosKronos.GetEstadoKEE(pendienteWeb_B2B.GetCups(r["cups20"].ToString(),
                                Convert.ToDateTime(r["fh_desde"]), Convert.ToDateTime(r["fh_hasta"])));

                            if (subestadosKronos.existe)
                            {
                                workSheet.Cells[f, c].Value = subestadosKronos.estado_periodo; c++;
                                workSheet.Cells[f, c].Value = subestadosKronos.area_responsable; c++;
                                workSheet.Cells[f, c].Value = subestadosKronos.descripcion_subestado; c++;
                                workSheet.Cells[f, c].Value = subestadosKronos.descripcion_estado; c++;
                            }
                        }


                    }
                    db.CloseConnection();


                    allCells = workSheet.Cells[1, 1, f, c];
                    allCells.AutoFitColumns();

                    #endregion

                    #region Detalle POR BTN

                    f = 1;
                    c = 1;

                    workSheet = excelPackage.Workbook.Worksheets.Add("Detalle POR BTN");
                    headerCells = workSheet.Cells[1, 1, 1, 17];
                    headerFont = headerCells.Style.Font;


                    headerCells = workSheet.Cells[1, 1, 1, 30];
                    headerFont = headerCells.Style.Font;
                    headerFont.Bold = true;
                    allCells = workSheet.Cells[1, 1, 50, 50];

                    //Ponemos columnas directamente
                    workSheet.Cells[1, 1].Value = "EMPRESA";
                    workSheet.Cells[1, 2].Value = "SEGMENTO";
                    workSheet.Cells[1, 3].Value = "TIPO CLIENTE";
                    workSheet.Cells[1, 4].Value = "NIF";
                    workSheet.Cells[1, 5].Value = "CLIENTE";
                    workSheet.Cells[1, 6].Value = "FALTACONT";
                    workSheet.Cells[1, 7].Value = "FPSERCON";
                    workSheet.Cells[1, 8].Value = "CUPS20";
                    workSheet.Cells[1, 9].Value = "Nº INSTALACIÓN";
                    workSheet.Cells[1, 10].Value = "TARIFA";
                    workSheet.Cells[1, 11].Value = "CONTRATO";
                    workSheet.Cells[1, 12].Value = "MES";
                    workSheet.Cells[1, 13].Value = "DISTRIBUIDORA";
                    workSheet.Cells[1, 14].Value = "ESTADO";
                    workSheet.Cells[1, 15].Value = "SUBESTADO";
                    workSheet.Cells[1, 16].Value = "DIAS ESTADO";
                    workSheet.Cells[1, 17].Value = "TAM";
                    workSheet.Cells[1, 18].Value = "MESES PDTES FACTURAR";
                    workSheet.Cells[1, 19].Value = "IMPORTE PDTE FACTURAR";
                    workSheet.Cells[1, 20].Value = "ÁGORA";
                    workSheet.Cells[1, 21].Value = "Estado periodo KEE";
                    workSheet.Cells[1, 22].Value = "Área responsable KEE";
                    workSheet.Cells[1, 23].Value = "Subestado KEE";
                    workSheet.Cells[1, 24].Value = "Estado KEE";


                    //for (int i = 1; i <= c; i++)
                    //{
                    //    workSheet.Cells[f, i].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    //    workSheet.Cells[f, i].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                    //}

                    strSql = "SELECT ps.cd_empr, ps.cd_tp_tension, ps.cd_nif_cif_cli, ps.de_tp_cli, ps.tx_apell_cli,"
                        + " ps.fh_alta_crto, ps.fh_inicio_vers_crto, p.cd_cups as cups20, p.id_instalacion, ps.cd_tarifa_c,"
                        + " ps.cd_crto_comercial, ps.de_empr_distdora_nombre,  p.lg_multimedida,"
                        + " concat(p.cd_estado,' ',de.de_estado) as de_estado, concat(p.cd_subestado,' ',ds.de_subestado) as de_subestado, p.fh_periodo as mes, p.agora, p.TAM, p.fh_prev_fin_crto, p.fh_baja_crto"
                        + " FROM fact.t_ed_h_sap_pendiente_facturar_agrupado p"
                        + " LEFT OUTER JOIN cont.t_ed_h_ps_pt ps ON"
                        + " ps.cups20 = p.cd_cups"
                        + " LEFT OUTER JOIN fact.t_ed_p_estado_sap_pendiente_facturar de on"
                        + " de.cd_estado = p.cd_estado"
                        + " LEFT OUTER JOIN fact.t_ed_p_subestado_sap_pendiente_facturar ds on"
                        + " ds.cd_subestado = p.cd_subestado"
                        + " where p.fh_envio = '" + fecha_informe.Date.ToString("yyyy-MM-dd") + "' and"
                        + " p.cd_empr_titular = 'PT1Q' and ps.cd_tp_tension = 'BTN'";


                    strSql = DetalleExcel(fecha_informe, lista_empresas_PT, lista_segmentos_BTN);


                    db = new MySQLDB(MySQLDB.Esquemas.GBL);
                    command = new MySqlCommand(strSql, db.con);
                    r = command.ExecuteReader();
                    while (r.Read())
                    {
                        f++;
                        c = 1;

                        if (r["cd_empr"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_empr"].ToString();
                        c++;

                        if (r["cd_tp_tension"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_tp_tension"].ToString();
                        c++;

                        if (r["de_tp_cli"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_tp_cli"].ToString();
                        c++;

                        if (r["cd_nif_cif_cli"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_nif_cif_cli"].ToString();
                        c++;

                        if (r["tx_apell_cli"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["tx_apell_cli"].ToString();
                        c++;

                        if (r["fh_alta_crto"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_alta_crto"]).Date;
                            workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                        }
                        c++;

                        if (r["fh_inicio_vers_crto"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDateTime(r["fh_inicio_vers_crto"]).Date;
                            workSheet.Cells[f, c].Style.Numberformat.Format = DateTimeFormatInfo.CurrentInfo.ShortDatePattern;
                        }
                        c++;

                        if (r["cups20"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cups20"].ToString();
                        c++;

                        if (r["id_instalacion"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["id_instalacion"].ToString();
                        c++;

                        if (r["cd_tarifa_c"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_tarifa_c"].ToString();
                        c++;

                        if (r["cd_crto_comercial"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["cd_crto_comercial"].ToString();
                        c++;

                        if (r["mes"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToInt32(r["mes"]);
                            aniomes = Convert.ToInt32(r["mes"]);
                            fecha_registro = new DateTime(Convert.ToInt32(aniomes.ToString().Substring(0, 4)),
                                Convert.ToInt32(aniomes.ToString().Substring(4, 2)), 1);
                        }
                        c++;

                        if (r["de_empr_distdora_nombre"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_empr_distdora_nombre"].ToString();
                        c++;

                        if (r["de_estado"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_estado"].ToString();
                        c++;

                        if (r["de_subestado"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["de_subestado"].ToString();
                        c++;

                        //if (r["lg_multimedida"] != System.DBNull.Value)
                        //{
                        //    workSheet.Cells[f, c].Value = r["lg_multimedida"].ToString();

                        //}
                        //else
                        //{
                        //    workSheet.Cells[f, c].Value = "N";
                        //}

                        workSheet.Cells[f, c].Value = GetDiasEstado(r["cups20"].ToString());
                        workSheet.Cells[f, c].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        c++;

                        if (r["TAM"] != System.DBNull.Value)
                        {
                            workSheet.Cells[f, c].Value = Convert.ToDouble(r["TAM"]);
                            workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00";
                        }
                        c++;


                        if (r["mes"] != System.DBNull.Value)
                        {
                            //int meses_pdtes = mes_actual - Convert.ToInt32(r["mes"]);
                            meses_pdtes = ((fecha_actual.Year - fecha_registro.Year) * 12) + fecha_actual.Month - fecha_registro.Month;
                            workSheet.Cells[f, c].Value = meses_pdtes;
                            workSheet.Cells[f, c].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        }
                        c++;


                        if (r["mes"] != System.DBNull.Value && r["TAM"] != System.DBNull.Value)
                        {
                            //int meses_pdtes = mes_actual - Convert.ToInt32(r["mes"]);
                            meses_pdtes = ((fecha_actual.Year - fecha_registro.Year) * 12) + fecha_actual.Month - fecha_registro.Month;
                            workSheet.Cells[f, c].Value = Convert.ToDouble(r["tam"]) * meses_pdtes;
                            workSheet.Cells[f, c].Style.Numberformat.Format = "#,##0.00"; c++;
                        }
                        else
                        {
                            c++;
                        }

                        if (r["agora"] != System.DBNull.Value)
                            workSheet.Cells[f, c].Value = r["agora"].ToString();

                        workSheet.Cells[f, c].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        c++;

                        if (subestados_sap.AreaResponsableMedida(r["cd_subestado"].ToString()))
                        {
                            subestadosKronos.GetEstadoKEE(pendienteWeb_B2B.GetCups(r["cups20"].ToString(),
                                Convert.ToDateTime(r["fh_desde"]), Convert.ToDateTime(r["fh_hasta"])));

                            if (subestadosKronos.existe)
                            {
                                workSheet.Cells[f, c].Value = subestadosKronos.estado_periodo; c++;
                                workSheet.Cells[f, c].Value = subestadosKronos.area_responsable; c++;
                                workSheet.Cells[f, c].Value = subestadosKronos.descripcion_subestado; c++;
                                workSheet.Cells[f, c].Value = subestadosKronos.descripcion_estado; c++;
                            }
                        }

                    }
                    db.CloseConnection();

                    allCells = workSheet.Cells[1, 1, f, c];
                    allCells.AutoFitColumns();
                    #endregion

                    //Muevo hoja cuatro después de la hoja uno
                    excelPackage.Workbook.Worksheets.MoveAfter(excelPackage.Workbook.Worksheets[3].Name, excelPackage.Workbook.Worksheets[0].Name);
                    //Muevo hoja cinco después de la hoja tres
                    excelPackage.Workbook.Worksheets.MoveAfter(excelPackage.Workbook.Worksheets[4].Name, excelPackage.Workbook.Worksheets[2].Name);

                    excelPackage.SaveAs(fileInfo);

                    if (automatico && param.GetValue("mail_enviar_mail_psat_tam") == "S")
                    {
                        ss_pp.Update_Fecha_Fin("Facturación", "Informe Pendiente KRONOS SAP BI", "Informe Pendiente KRONOS SAP BI");
                        EnvioCorreo_PdteWeb_BI(ruta_salida_archivo, fecha_informe);
                    }

                    if (automatico)
                        ss_pp.Update_Fecha_Fin("Facturación", "Informe Pendiente KRONOS SAP BI", "Informe Pendiente KRONOS SAP BI");

                }
                else if (automatico)
                {
                    ss_pp.Update_Comentario("Facturación", "Informe Pendiente KRONOS SAP BI", "Informe Pendiente KRONOS SAP BI",
                        "La fecha de actualización en BI es: " + UltimaActualizacionMySQL().Date.ToString("dd/MM/yyyy"));
                }
            }

            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

            }
        }

        private int Total_Pendiente(bool agora, DateTime fecha, List<string> lista_empresas, List<string> lista_segmentos, string estado, string subestado)
        {
            int total = 0;

            List<EndesaEntity.medida.Pendiente> o;

            if (lista_segmentos == null)
            {
                if (dic_pendiente_hist_fecha.TryGetValue(fecha, out o))
                {
                    for (int j = 0; j < lista_empresas.Count; j++)
                        for (int i = 0; i < o.Count; i++)
                        {
                            /*
                            if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora &&
                                (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null) ))
                                total = total + 1;
                            */

                            if (o[i].subestado_SAP is null) {
                                if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora && (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                    total = total + 1;
                            }
                            else {
                                if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora && (o[i].cod_estado == estado && (o[i].cod_subestado_SAP == subestado || subestado == null)))
                                    total = total + 1;
                            }


                        }
                }
            }
            else
            {
                if (dic_pendiente_hist_fecha.TryGetValue(fecha, out o))
                {
                    for (int j = 0; j < lista_empresas.Count; j++)
                        for (int z = 0; z < lista_segmentos.Count; z++)
                            for (int i = 0; i < o.Count; i++)
                            {
                                /*
                                if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z]
                                    && o[i].agora == agora &&
                                    (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                    total = total + 1;
                                */

                                if (o[i].subestado_SAP == null)
                                {
                                    if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z]  && o[i].agora == agora &&
                                    (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                        total = total + 1;
                                }
                                else
                                {

                                   if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z]  && o[i].agora == agora &&
                                   (o[i].cod_estado == estado && (o[i].cod_subestado_SAP == subestado || subestado == null)))
                                        total = total + 1;

                                }

                            }
                }
            }

            return total;

        }

        private int Total_PendienteUno(bool agora, DateTime fecha, List<string> lista_empresas, List<string> lista_segmentos, string estado, string subestado, string SAP )
        {
            int total = 0;

            List<EndesaEntity.medida.Pendiente> o;

            if (lista_segmentos == null)
            {
                if (dic_pendiente_hist_fecha.TryGetValue(fecha, out o))
                {
                    for (int j = 0; j < lista_empresas.Count; j++)
                        for (int i = 0; i < o.Count; i++)
                        {
                            /*
                            if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora &&
                                (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null) ))
                                total = total + 1;
                            */

                            //if (dia.ToString("yyyy-MM-dd") == o[i].fecha_informe.ToString("yyyy-MM-dd")){ 

                                if (SAP == "N") {
                                    if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora && (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)) && (o[i].cod_subestado_SAP==null))
                                        total = total + 1;
                                }
                                else
                                {
                                    if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora && (o[i].cod_estado == estado && (o[i].cod_subestado_SAP == subestado || subestado == null)) )
                                        total = total + 1;
                                }

                            //}
                        }
                }
            }
            else
            {
                if (dic_pendiente_hist_fecha.TryGetValue(fecha, out o))
                {
                    for (int j = 0; j < lista_empresas.Count; j++)
                        for (int z = 0; z < lista_segmentos.Count; z++)
                            for (int i = 0; i < o.Count; i++)
                            {
                                /*
                                if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z]
                                    && o[i].agora == agora &&
                                    (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                    total = total + 1;
                                */

                               /* if (o[i].subestado_SAP == null)
                                {
                                    if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z] && o[i].agora == agora &&
                                    (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                        total = total + 1;
                                }
                                else
                                {

                                    if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z] && o[i].agora == agora &&
                                    (o[i].cod_estado == estado && (o[i].cod_subestado_SAP == subestado || subestado == null)))
                                        total = total + 1;

                                }
                                */

                                    if (SAP == "N")
                                    {
                                        if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z] && o[i].agora == agora &&
                                        (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                            total = total + 1;
                                    }

                                    // if (o[i].subestado_SAP is null)
                                    //{
                                    //   if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora && (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                    //       total = total + 1;
                                    //}
                                    else
                                    {
                                        if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z] && o[i].agora == agora &&
                                    (o[i].cod_estado == estado && (o[i].cod_subestado_SAP == subestado || subestado == null)))
                                            total = total + 1;
                                    }


                            }
                }
            }

            return total;

        }

        private double Total_Pendiente_TAM(bool agora, DateTime fecha, List<string> lista_empresas, List<string> lista_segmentos, string estado, string subestado)
        {
            double total = 0;

            List<EndesaEntity.medida.Pendiente> o;

            if (lista_segmentos == null)
            {
                if (dic_pendiente_hist_fecha.TryGetValue(fecha, out o))
                {
                    for (int j = 0; j < lista_empresas.Count; j++)
                        for (int i = 0; i < o.Count; i++)
                        {

                            /*
                            if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora &&
                                (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                total = total + o[i].tam;
                            */

                            if (o[i].subestado_SAP == null)
                            {
                                if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora && (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                    total = total + o[i].tam;
                            }
                            else
                            {
                                if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].agora == agora && (o[i].cod_estado == estado && (o[i].cod_subestado_SAP == subestado || subestado == null)))
                                    total = total + o[i].tam;
                            }

                        }


                }
            }
            else
            {
                if (dic_pendiente_hist_fecha.TryGetValue(fecha, out o))
                {
                    for (int j = 0; j < lista_empresas.Count; j++)
                        for (int z = 0; z < lista_segmentos.Count; z++)
                            for (int i = 0; i < o.Count; i++)
                            {
                                /*
                                if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z]
                                        && o[i].agora == agora &&
                                    (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                    total = total + o[i].tam;
                                */

                                if (o[i].subestado_SAP == null)
                                {
                                    if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z] && o[i].agora == agora &&
                                    (o[i].cod_estado == estado && (o[i].cod_subestado == subestado || subestado == null)))
                                        total = total + o[i].tam;
                                }
                                else
                                {

                                    if (o[i].cod_empresaTitular == lista_empresas[j] && o[i].segmento == lista_segmentos[z] && o[i].agora == agora &&
                                    (o[i].cod_estado == estado && (o[i].cod_subestado_SAP == subestado || subestado == null)))
                                        total = total + o[i].tam;

                                }



                            }


                }
            }

            return total;

        }

        private string DetalleExcel(DateTime fecha_informe, List<string> lista_empresas, List<string> lista_tension)
        {
            string strSql = "";
            bool firstOnly = true;

            strSql = "SELECT ps.cd_empr, ps.cd_tp_tension, ps.cd_nif_cif_cli, ps.de_tp_cli, ps.tx_apell_cli,"
                + " ps.fh_alta_crto, ps.fh_inicio_vers_crto, p.cd_cups as cups20, p.id_instalacion, ps.cd_tarifa_c,"
                + " ps.cd_crto_comercial, ps.de_empr_distdora_nombre, p.lg_multimedida, p.fh_desde, p.fh_hasta, p.cd_subestado,"
                + " concat(p.cd_estado,' ',de.de_estado) as de_estado, concat(p.cd_subestado,' ',if (ds.de_subestado is null,'', ds.de_subestado)) as de_subestado, p.fh_periodo as mes, p.agora, p.TAM , ps.fh_prev_fin_crto, ps.fh_baja_crto, p.id_crto_ext"
                + " FROM fact.t_ed_h_sap_pendiente_facturar_agrupado p";

            if (lista_empresas[0].Contains("PT"))
                strSql += " LEFT OUTER JOIN cont.t_ed_h_ps_pt ps ON";
            else
                strSql += " LEFT OUTER JOIN cont.t_ed_h_ps ps ON";

            strSql += " ps.cups20 = p.cd_cups"
                + " LEFT OUTER JOIN fact.t_ed_p_estado_sap_pendiente_facturar de on"
                + " de.cd_estado = p.cd_estado"
                + " LEFT OUTER JOIN fact.t_ed_p_subestado_sap_pendiente_facturar ds on"
                + " ds.cd_subestado = p.cd_subestado"
                + " where p.fh_envio = '" + fecha_informe.Date.ToString("yyyy-MM-dd") + "' and"
               // + " ps.cups20 in ('ES0021000001531208ZA') and "
                + " p.cd_empr_titular in (";

            foreach (string p in lista_empresas)
            {
                if (firstOnly)
                {
                    strSql += "'" + p + "'";
                    firstOnly = false;
                }
                else
                    strSql += ",'" + p + "'";

            }

            strSql += ")";

            if (lista_tension != null)
            {
                firstOnly = true;
                strSql += " and ps.cd_tp_tension in (";
                foreach (string p in lista_tension)
                {
                    if (firstOnly)
                    {
                        strSql += "'" + p + "'";
                        firstOnly = false;
                    }
                    else
                        strSql += ",'" + p + "'";

                }
                strSql += ")";
            }

            return strSql;

        }
        private void EnvioCorreo_PdteWeb_BI(string archivo, DateTime fecha_informe)
        {
            FileInfo fileInfo = new FileInfo(archivo);
            StringBuilder textBody = new StringBuilder();

            try
            {
                string from = param.GetValue("mail_from_psat_tam");
                string to = param.GetValue("mail_to_psat_tam");
                string cc = param.GetValue("mail_cc_psat_tam");
                string subject = param.GetValue("mail_subject_psat_tam") + " a " + fecha_informe.ToString("dd/MM/yyyy");

                textBody.Append(System.Environment.NewLine);
                textBody.Append(DateTime.Now.Hour < 14 ? "Buenos días:" : "Buenas tardes:");
                textBody.Append(System.Environment.NewLine);
                textBody.Append("  Se adjunta el archivo ").Append(fileInfo.Name).Append(".");
                textBody.Append(System.Environment.NewLine);
                textBody.Append("Un saludo.");

                //EndesaBusiness.mail.MailExchangeServer mes = new EndesaBusiness.mail.MailExchangeServer("RSIOPEGMA001");
                EndesaBusiness.office365.OAuth_Mail mes = new EndesaBusiness.office365.OAuth_Mail();

                if (param.GetValue("mail_enviar_mail_psat_tam") == "S")
                    mes.SendMail(from, to, cc, subject, utilidades.FuncionesTexto.TextToHtml(textBody.ToString()), archivo);

                else
                    mes.SaveMail(from, to, cc, subject, utilidades.FuncionesTexto.TextToHtml(textBody.ToString()), archivo);

                ficheroLog.Add("Correo enviado desde: " + param.GetValue("mail_from"));
            }
            catch (Exception e)
            {
                ficheroLog.AddError("EnvioCorreo: " + e.Message);
            }
        }

        private DateTime CalculaFechaDesdeinforme()
        {
            MySQLDB db;
            MySqlCommand command;
            MySqlDataReader r;
            string strSql = "";
            DateTime date = DateTime.Now;

            strSql = "SELECT c.fh_envio"
                + " FROM t_ed_h_sap_pendiente_facturar_agrupado c"
                + " GROUP BY c.fh_envio desc"
                + " LIMIT 5";

            db = new MySQLDB(MySQLDB.Esquemas.FAC);
            command = new MySqlCommand(strSql, db.con);
            r = command.ExecuteReader();
            while (r.Read())
            {
                if (r["fh_envio"] != System.DBNull.Value)
                    date = Convert.ToDateTime(r["fh_envio"]);
            }
            db.CloseConnection();

            return date;

        }

        private DateTime CalculaFechaDetalle()
        {
            MySQLDB db;
            MySqlCommand command;
            MySqlDataReader r;
            string strSql = "";
            DateTime date = DateTime.Now;

            strSql = "SELECT max(c.fh_envio) as max_fecha"
                + " FROM t_ed_h_sap_pendiente_facturar_agrupado c";


            db = new MySQLDB(MySQLDB.Esquemas.FAC);
            command = new MySqlCommand(strSql, db.con);
            r = command.ExecuteReader();
            while (r.Read())
            {
                if (r["max_fecha"] != System.DBNull.Value)
                    date = Convert.ToDateTime(r["max_fecha"]);
            }
            db.CloseConnection();

            return date;

        }

        private Dictionary<string, DateTime> CargaDiasEstado()
        {
            Dictionary<string, DateTime> d = new Dictionary<string, DateTime>();

            MySQLDB db;
            MySqlCommand command;
            MySqlDataReader r;
            string strSql = "";
            string cups = "";
            DateTime primera_fecha = DateTime.Now;

            strSql = "SELECT p.cd_cups, p.fh_periodo, MIN(p.fh_envio) AS primera_fecha, p.cd_subestado"
                + " FROM t_ed_h_sap_pendiente_facturar_agrupado p"
                + " WHERE p.fh_periodo >= " + DateTime.Now.AddYears(-1).ToString("yyyyMM")
                + " GROUP BY p.cd_cups, p.fh_periodo, p.cd_subestado"
                + " ORDER BY p.fh_envio DESC";


            db = new MySQLDB(MySQLDB.Esquemas.FAC);
            command = new MySqlCommand(strSql, db.con);
            r = command.ExecuteReader();
            while (r.Read())
            {
                cups = r["cd_cups"].ToString();
                primera_fecha = Convert.ToDateTime(r["primera_fecha"]);

                DateTime o;
                if (!d.TryGetValue(cups, out o))
                    d.Add(cups, primera_fecha);

            }
            db.CloseConnection();
            return d;

        }

        private int GetDiasEstado(string cups)
        {
            int dias = 1;
            DateTime o;
            if (dic_dias_estado.TryGetValue(cups, out o))
            {
                dias = (DateTime.Now.Date - o.Date).Days + 1;
            }



            return dias;
        }
    }
}